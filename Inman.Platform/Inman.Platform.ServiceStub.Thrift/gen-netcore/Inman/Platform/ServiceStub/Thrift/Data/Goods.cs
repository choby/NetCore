/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Inman.Platform.ServiceStub.Thrift.Data
{

  public partial class Goods : TBase
  {
    private int _Id;
    private int _DesignID;
    private string _ProductCategory1;
    private string _ProductCategory2;
    private string _ProductCategory3;
    private string _Brand;
    private string _ProductName;
    private int _ProductYear;
    private string _Season;
    private string _ExecStandard;
    private string _SafetyCass;
    private string _Component;
    private double _DevCost;
    private string _ProductSN;
    private double _FOBCost;
    private double _ProcessingCost;
    private double _ProductCost;
    private double _InternalPrice;
    private double _SalesPrice;
    private double _TagPrice;
    private double _BatchPrice;
    private double _RADCost;
    private bool _IsEmergency;
    private string _ProductTitle;
    private string _QualityGrade;
    private string _Filler;
    private double _FillFeatherPercent;
    private int _WashingMethodPictureCode;
    private string _FirstOnsaleShelveDate;
    private int _SortCode;
    private int _AccountID;
    private bool _Deleted;
    private int _Enabled;
    private string _CreatedOn;
    private string _CreatedBy;
    private int _CreatedCustomerId;
    private string _ModifiedOn;
    private string _ModifiedBy;
    private int _ModifiedCustomerId;
    private string _Sex;
    private string _WashingMethodPicture;
    private string _CategoryClass;
    private bool _IsUploadK3;
    private string _UploadK3Date;
    private int _OwnerId;
    private Design _Design;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public int DesignID
    {
      get
      {
        return _DesignID;
      }
      set
      {
        __isset.DesignID = true;
        this._DesignID = value;
      }
    }

    public string ProductCategory1
    {
      get
      {
        return _ProductCategory1;
      }
      set
      {
        __isset.ProductCategory1 = true;
        this._ProductCategory1 = value;
      }
    }

    public string ProductCategory2
    {
      get
      {
        return _ProductCategory2;
      }
      set
      {
        __isset.ProductCategory2 = true;
        this._ProductCategory2 = value;
      }
    }

    public string ProductCategory3
    {
      get
      {
        return _ProductCategory3;
      }
      set
      {
        __isset.ProductCategory3 = true;
        this._ProductCategory3 = value;
      }
    }

    public string Brand
    {
      get
      {
        return _Brand;
      }
      set
      {
        __isset.Brand = true;
        this._Brand = value;
      }
    }

    public string ProductName
    {
      get
      {
        return _ProductName;
      }
      set
      {
        __isset.ProductName = true;
        this._ProductName = value;
      }
    }

    public int ProductYear
    {
      get
      {
        return _ProductYear;
      }
      set
      {
        __isset.ProductYear = true;
        this._ProductYear = value;
      }
    }

    public string Season
    {
      get
      {
        return _Season;
      }
      set
      {
        __isset.Season = true;
        this._Season = value;
      }
    }

    public string ExecStandard
    {
      get
      {
        return _ExecStandard;
      }
      set
      {
        __isset.ExecStandard = true;
        this._ExecStandard = value;
      }
    }

    public string SafetyCass
    {
      get
      {
        return _SafetyCass;
      }
      set
      {
        __isset.SafetyCass = true;
        this._SafetyCass = value;
      }
    }

    public string Component
    {
      get
      {
        return _Component;
      }
      set
      {
        __isset.Component = true;
        this._Component = value;
      }
    }

    public double DevCost
    {
      get
      {
        return _DevCost;
      }
      set
      {
        __isset.DevCost = true;
        this._DevCost = value;
      }
    }

    public string ProductSN
    {
      get
      {
        return _ProductSN;
      }
      set
      {
        __isset.ProductSN = true;
        this._ProductSN = value;
      }
    }

    public double FOBCost
    {
      get
      {
        return _FOBCost;
      }
      set
      {
        __isset.FOBCost = true;
        this._FOBCost = value;
      }
    }

    public double ProcessingCost
    {
      get
      {
        return _ProcessingCost;
      }
      set
      {
        __isset.ProcessingCost = true;
        this._ProcessingCost = value;
      }
    }

    public double ProductCost
    {
      get
      {
        return _ProductCost;
      }
      set
      {
        __isset.ProductCost = true;
        this._ProductCost = value;
      }
    }

    public double InternalPrice
    {
      get
      {
        return _InternalPrice;
      }
      set
      {
        __isset.InternalPrice = true;
        this._InternalPrice = value;
      }
    }

    public double SalesPrice
    {
      get
      {
        return _SalesPrice;
      }
      set
      {
        __isset.SalesPrice = true;
        this._SalesPrice = value;
      }
    }

    public double TagPrice
    {
      get
      {
        return _TagPrice;
      }
      set
      {
        __isset.TagPrice = true;
        this._TagPrice = value;
      }
    }

    public double BatchPrice
    {
      get
      {
        return _BatchPrice;
      }
      set
      {
        __isset.BatchPrice = true;
        this._BatchPrice = value;
      }
    }

    public double RADCost
    {
      get
      {
        return _RADCost;
      }
      set
      {
        __isset.RADCost = true;
        this._RADCost = value;
      }
    }

    public bool IsEmergency
    {
      get
      {
        return _IsEmergency;
      }
      set
      {
        __isset.IsEmergency = true;
        this._IsEmergency = value;
      }
    }

    public string ProductTitle
    {
      get
      {
        return _ProductTitle;
      }
      set
      {
        __isset.ProductTitle = true;
        this._ProductTitle = value;
      }
    }

    public string QualityGrade
    {
      get
      {
        return _QualityGrade;
      }
      set
      {
        __isset.QualityGrade = true;
        this._QualityGrade = value;
      }
    }

    public string Filler
    {
      get
      {
        return _Filler;
      }
      set
      {
        __isset.Filler = true;
        this._Filler = value;
      }
    }

    public double FillFeatherPercent
    {
      get
      {
        return _FillFeatherPercent;
      }
      set
      {
        __isset.FillFeatherPercent = true;
        this._FillFeatherPercent = value;
      }
    }

    public int WashingMethodPictureCode
    {
      get
      {
        return _WashingMethodPictureCode;
      }
      set
      {
        __isset.WashingMethodPictureCode = true;
        this._WashingMethodPictureCode = value;
      }
    }

    public string FirstOnsaleShelveDate
    {
      get
      {
        return _FirstOnsaleShelveDate;
      }
      set
      {
        __isset.FirstOnsaleShelveDate = true;
        this._FirstOnsaleShelveDate = value;
      }
    }

    public int SortCode
    {
      get
      {
        return _SortCode;
      }
      set
      {
        __isset.SortCode = true;
        this._SortCode = value;
      }
    }

    public int AccountID
    {
      get
      {
        return _AccountID;
      }
      set
      {
        __isset.AccountID = true;
        this._AccountID = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _Deleted;
      }
      set
      {
        __isset.Deleted = true;
        this._Deleted = value;
      }
    }

    public int Enabled
    {
      get
      {
        return _Enabled;
      }
      set
      {
        __isset.Enabled = true;
        this._Enabled = value;
      }
    }

    public string CreatedOn
    {
      get
      {
        return _CreatedOn;
      }
      set
      {
        __isset.CreatedOn = true;
        this._CreatedOn = value;
      }
    }

    public string CreatedBy
    {
      get
      {
        return _CreatedBy;
      }
      set
      {
        __isset.CreatedBy = true;
        this._CreatedBy = value;
      }
    }

    public int CreatedCustomerId
    {
      get
      {
        return _CreatedCustomerId;
      }
      set
      {
        __isset.CreatedCustomerId = true;
        this._CreatedCustomerId = value;
      }
    }

    public string ModifiedOn
    {
      get
      {
        return _ModifiedOn;
      }
      set
      {
        __isset.ModifiedOn = true;
        this._ModifiedOn = value;
      }
    }

    public string ModifiedBy
    {
      get
      {
        return _ModifiedBy;
      }
      set
      {
        __isset.ModifiedBy = true;
        this._ModifiedBy = value;
      }
    }

    public int ModifiedCustomerId
    {
      get
      {
        return _ModifiedCustomerId;
      }
      set
      {
        __isset.ModifiedCustomerId = true;
        this._ModifiedCustomerId = value;
      }
    }

    public string Sex
    {
      get
      {
        return _Sex;
      }
      set
      {
        __isset.Sex = true;
        this._Sex = value;
      }
    }

    public string WashingMethodPicture
    {
      get
      {
        return _WashingMethodPicture;
      }
      set
      {
        __isset.WashingMethodPicture = true;
        this._WashingMethodPicture = value;
      }
    }

    public string CategoryClass
    {
      get
      {
        return _CategoryClass;
      }
      set
      {
        __isset.CategoryClass = true;
        this._CategoryClass = value;
      }
    }

    public bool IsUploadK3
    {
      get
      {
        return _IsUploadK3;
      }
      set
      {
        __isset.IsUploadK3 = true;
        this._IsUploadK3 = value;
      }
    }

    public string UploadK3Date
    {
      get
      {
        return _UploadK3Date;
      }
      set
      {
        __isset.UploadK3Date = true;
        this._UploadK3Date = value;
      }
    }

    public int OwnerId
    {
      get
      {
        return _OwnerId;
      }
      set
      {
        __isset.OwnerId = true;
        this._OwnerId = value;
      }
    }

    public Design Design
    {
      get
      {
        return _Design;
      }
      set
      {
        __isset.Design = true;
        this._Design = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Id;
      public bool DesignID;
      public bool ProductCategory1;
      public bool ProductCategory2;
      public bool ProductCategory3;
      public bool Brand;
      public bool ProductName;
      public bool ProductYear;
      public bool Season;
      public bool ExecStandard;
      public bool SafetyCass;
      public bool Component;
      public bool DevCost;
      public bool ProductSN;
      public bool FOBCost;
      public bool ProcessingCost;
      public bool ProductCost;
      public bool InternalPrice;
      public bool SalesPrice;
      public bool TagPrice;
      public bool BatchPrice;
      public bool RADCost;
      public bool IsEmergency;
      public bool ProductTitle;
      public bool QualityGrade;
      public bool Filler;
      public bool FillFeatherPercent;
      public bool WashingMethodPictureCode;
      public bool FirstOnsaleShelveDate;
      public bool SortCode;
      public bool AccountID;
      public bool Deleted;
      public bool Enabled;
      public bool CreatedOn;
      public bool CreatedBy;
      public bool CreatedCustomerId;
      public bool ModifiedOn;
      public bool ModifiedBy;
      public bool ModifiedCustomerId;
      public bool Sex;
      public bool WashingMethodPicture;
      public bool CategoryClass;
      public bool IsUploadK3;
      public bool UploadK3Date;
      public bool OwnerId;
      public bool Design;
    }

    public Goods()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                DesignID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ProductCategory1 = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ProductCategory2 = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ProductCategory3 = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Brand = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                ProductName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                ProductYear = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Season = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                ExecStandard = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                SafetyCass = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                Component = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Double)
              {
                DevCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                ProductSN = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.Double)
              {
                FOBCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.Double)
              {
                ProcessingCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.Double)
              {
                ProductCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.Double)
              {
                InternalPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.Double)
              {
                SalesPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.Double)
              {
                TagPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.Double)
              {
                BatchPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.Double)
              {
                RADCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.Bool)
              {
                IsEmergency = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.String)
              {
                ProductTitle = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 25:
              if (field.Type == TType.String)
              {
                QualityGrade = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 26:
              if (field.Type == TType.String)
              {
                Filler = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 27:
              if (field.Type == TType.Double)
              {
                FillFeatherPercent = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 28:
              if (field.Type == TType.I32)
              {
                WashingMethodPictureCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 29:
              if (field.Type == TType.String)
              {
                FirstOnsaleShelveDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 30:
              if (field.Type == TType.I32)
              {
                SortCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 31:
              if (field.Type == TType.I32)
              {
                AccountID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 32:
              if (field.Type == TType.Bool)
              {
                Deleted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 33:
              if (field.Type == TType.I32)
              {
                Enabled = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 34:
              if (field.Type == TType.String)
              {
                CreatedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 35:
              if (field.Type == TType.String)
              {
                CreatedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 36:
              if (field.Type == TType.I32)
              {
                CreatedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 37:
              if (field.Type == TType.String)
              {
                ModifiedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 38:
              if (field.Type == TType.String)
              {
                ModifiedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 39:
              if (field.Type == TType.I32)
              {
                ModifiedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 40:
              if (field.Type == TType.String)
              {
                Sex = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 41:
              if (field.Type == TType.String)
              {
                WashingMethodPicture = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 42:
              if (field.Type == TType.String)
              {
                CategoryClass = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 43:
              if (field.Type == TType.Bool)
              {
                IsUploadK3 = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 44:
              if (field.Type == TType.String)
              {
                UploadK3Date = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 45:
              if (field.Type == TType.I32)
              {
                OwnerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 46:
              if (field.Type == TType.Struct)
              {
                Design = new Design();
                await Design.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Goods");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.Id)
        {
          field.Name = "Id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DesignID)
        {
          field.Name = "DesignID";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(DesignID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductCategory1 != null && __isset.ProductCategory1)
        {
          field.Name = "ProductCategory1";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductCategory1, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductCategory2 != null && __isset.ProductCategory2)
        {
          field.Name = "ProductCategory2";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductCategory2, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductCategory3 != null && __isset.ProductCategory3)
        {
          field.Name = "ProductCategory3";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductCategory3, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Brand != null && __isset.Brand)
        {
          field.Name = "Brand";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Brand, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductName != null && __isset.ProductName)
        {
          field.Name = "ProductName";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ProductYear)
        {
          field.Name = "ProductYear";
          field.Type = TType.I32;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ProductYear, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Season != null && __isset.Season)
        {
          field.Name = "Season";
          field.Type = TType.String;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Season, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ExecStandard != null && __isset.ExecStandard)
        {
          field.Name = "ExecStandard";
          field.Type = TType.String;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ExecStandard, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SafetyCass != null && __isset.SafetyCass)
        {
          field.Name = "SafetyCass";
          field.Type = TType.String;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SafetyCass, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Component != null && __isset.Component)
        {
          field.Name = "Component";
          field.Type = TType.String;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Component, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DevCost)
        {
          field.Name = "DevCost";
          field.Type = TType.Double;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(DevCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductSN != null && __isset.ProductSN)
        {
          field.Name = "ProductSN";
          field.Type = TType.String;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductSN, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.FOBCost)
        {
          field.Name = "FOBCost";
          field.Type = TType.Double;
          field.ID = 15;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(FOBCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ProcessingCost)
        {
          field.Name = "ProcessingCost";
          field.Type = TType.Double;
          field.ID = 16;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ProcessingCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ProductCost)
        {
          field.Name = "ProductCost";
          field.Type = TType.Double;
          field.ID = 17;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ProductCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.InternalPrice)
        {
          field.Name = "InternalPrice";
          field.Type = TType.Double;
          field.ID = 18;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(InternalPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.SalesPrice)
        {
          field.Name = "SalesPrice";
          field.Type = TType.Double;
          field.ID = 19;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(SalesPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.TagPrice)
        {
          field.Name = "TagPrice";
          field.Type = TType.Double;
          field.ID = 20;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(TagPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.BatchPrice)
        {
          field.Name = "BatchPrice";
          field.Type = TType.Double;
          field.ID = 21;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(BatchPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.RADCost)
        {
          field.Name = "RADCost";
          field.Type = TType.Double;
          field.ID = 22;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(RADCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.IsEmergency)
        {
          field.Name = "IsEmergency";
          field.Type = TType.Bool;
          field.ID = 23;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(IsEmergency, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductTitle != null && __isset.ProductTitle)
        {
          field.Name = "ProductTitle";
          field.Type = TType.String;
          field.ID = 24;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductTitle, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (QualityGrade != null && __isset.QualityGrade)
        {
          field.Name = "QualityGrade";
          field.Type = TType.String;
          field.ID = 25;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(QualityGrade, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Filler != null && __isset.Filler)
        {
          field.Name = "Filler";
          field.Type = TType.String;
          field.ID = 26;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Filler, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.FillFeatherPercent)
        {
          field.Name = "FillFeatherPercent";
          field.Type = TType.Double;
          field.ID = 27;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(FillFeatherPercent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.WashingMethodPictureCode)
        {
          field.Name = "WashingMethodPictureCode";
          field.Type = TType.I32;
          field.ID = 28;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(WashingMethodPictureCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (FirstOnsaleShelveDate != null && __isset.FirstOnsaleShelveDate)
        {
          field.Name = "FirstOnsaleShelveDate";
          field.Type = TType.String;
          field.ID = 29;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FirstOnsaleShelveDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.SortCode)
        {
          field.Name = "SortCode";
          field.Type = TType.I32;
          field.ID = 30;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(SortCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.AccountID)
        {
          field.Name = "AccountID";
          field.Type = TType.I32;
          field.ID = 31;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(AccountID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Deleted)
        {
          field.Name = "Deleted";
          field.Type = TType.Bool;
          field.ID = 32;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Deleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Enabled)
        {
          field.Name = "Enabled";
          field.Type = TType.I32;
          field.ID = 33;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Enabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedOn != null && __isset.CreatedOn)
        {
          field.Name = "CreatedOn";
          field.Type = TType.String;
          field.ID = 34;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedBy != null && __isset.CreatedBy)
        {
          field.Name = "CreatedBy";
          field.Type = TType.String;
          field.ID = 35;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.CreatedCustomerId)
        {
          field.Name = "CreatedCustomerId";
          field.Type = TType.I32;
          field.ID = 36;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(CreatedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedOn != null && __isset.ModifiedOn)
        {
          field.Name = "ModifiedOn";
          field.Type = TType.String;
          field.ID = 37;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedBy != null && __isset.ModifiedBy)
        {
          field.Name = "ModifiedBy";
          field.Type = TType.String;
          field.ID = 38;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ModifiedCustomerId)
        {
          field.Name = "ModifiedCustomerId";
          field.Type = TType.I32;
          field.ID = 39;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ModifiedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Sex != null && __isset.Sex)
        {
          field.Name = "Sex";
          field.Type = TType.String;
          field.ID = 40;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Sex, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (WashingMethodPicture != null && __isset.WashingMethodPicture)
        {
          field.Name = "WashingMethodPicture";
          field.Type = TType.String;
          field.ID = 41;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(WashingMethodPicture, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CategoryClass != null && __isset.CategoryClass)
        {
          field.Name = "CategoryClass";
          field.Type = TType.String;
          field.ID = 42;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CategoryClass, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.IsUploadK3)
        {
          field.Name = "IsUploadK3";
          field.Type = TType.Bool;
          field.ID = 43;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(IsUploadK3, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UploadK3Date != null && __isset.UploadK3Date)
        {
          field.Name = "UploadK3Date";
          field.Type = TType.String;
          field.ID = 44;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UploadK3Date, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.OwnerId)
        {
          field.Name = "OwnerId";
          field.Type = TType.I32;
          field.ID = 45;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(OwnerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Design != null && __isset.Design)
        {
          field.Name = "Design";
          field.Type = TType.Struct;
          field.ID = 46;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Design.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Goods(");
      bool __first = true;
      if (__isset.Id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.DesignID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignID: ");
        sb.Append(DesignID);
      }
      if (ProductCategory1 != null && __isset.ProductCategory1)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductCategory1: ");
        sb.Append(ProductCategory1);
      }
      if (ProductCategory2 != null && __isset.ProductCategory2)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductCategory2: ");
        sb.Append(ProductCategory2);
      }
      if (ProductCategory3 != null && __isset.ProductCategory3)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductCategory3: ");
        sb.Append(ProductCategory3);
      }
      if (Brand != null && __isset.Brand)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Brand: ");
        sb.Append(Brand);
      }
      if (ProductName != null && __isset.ProductName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductName: ");
        sb.Append(ProductName);
      }
      if (__isset.ProductYear)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductYear: ");
        sb.Append(ProductYear);
      }
      if (Season != null && __isset.Season)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Season: ");
        sb.Append(Season);
      }
      if (ExecStandard != null && __isset.ExecStandard)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ExecStandard: ");
        sb.Append(ExecStandard);
      }
      if (SafetyCass != null && __isset.SafetyCass)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SafetyCass: ");
        sb.Append(SafetyCass);
      }
      if (Component != null && __isset.Component)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Component: ");
        sb.Append(Component);
      }
      if (__isset.DevCost)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DevCost: ");
        sb.Append(DevCost);
      }
      if (ProductSN != null && __isset.ProductSN)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductSN: ");
        sb.Append(ProductSN);
      }
      if (__isset.FOBCost)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FOBCost: ");
        sb.Append(FOBCost);
      }
      if (__isset.ProcessingCost)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProcessingCost: ");
        sb.Append(ProcessingCost);
      }
      if (__isset.ProductCost)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductCost: ");
        sb.Append(ProductCost);
      }
      if (__isset.InternalPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("InternalPrice: ");
        sb.Append(InternalPrice);
      }
      if (__isset.SalesPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SalesPrice: ");
        sb.Append(SalesPrice);
      }
      if (__isset.TagPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TagPrice: ");
        sb.Append(TagPrice);
      }
      if (__isset.BatchPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BatchPrice: ");
        sb.Append(BatchPrice);
      }
      if (__isset.RADCost)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RADCost: ");
        sb.Append(RADCost);
      }
      if (__isset.IsEmergency)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IsEmergency: ");
        sb.Append(IsEmergency);
      }
      if (ProductTitle != null && __isset.ProductTitle)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductTitle: ");
        sb.Append(ProductTitle);
      }
      if (QualityGrade != null && __isset.QualityGrade)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("QualityGrade: ");
        sb.Append(QualityGrade);
      }
      if (Filler != null && __isset.Filler)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Filler: ");
        sb.Append(Filler);
      }
      if (__isset.FillFeatherPercent)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FillFeatherPercent: ");
        sb.Append(FillFeatherPercent);
      }
      if (__isset.WashingMethodPictureCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("WashingMethodPictureCode: ");
        sb.Append(WashingMethodPictureCode);
      }
      if (FirstOnsaleShelveDate != null && __isset.FirstOnsaleShelveDate)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FirstOnsaleShelveDate: ");
        sb.Append(FirstOnsaleShelveDate);
      }
      if (__isset.SortCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SortCode: ");
        sb.Append(SortCode);
      }
      if (__isset.AccountID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AccountID: ");
        sb.Append(AccountID);
      }
      if (__isset.Deleted)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Deleted: ");
        sb.Append(Deleted);
      }
      if (__isset.Enabled)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Enabled: ");
        sb.Append(Enabled);
      }
      if (CreatedOn != null && __isset.CreatedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedOn: ");
        sb.Append(CreatedOn);
      }
      if (CreatedBy != null && __isset.CreatedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedBy: ");
        sb.Append(CreatedBy);
      }
      if (__isset.CreatedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedCustomerId: ");
        sb.Append(CreatedCustomerId);
      }
      if (ModifiedOn != null && __isset.ModifiedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedOn: ");
        sb.Append(ModifiedOn);
      }
      if (ModifiedBy != null && __isset.ModifiedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedBy: ");
        sb.Append(ModifiedBy);
      }
      if (__isset.ModifiedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedCustomerId: ");
        sb.Append(ModifiedCustomerId);
      }
      if (Sex != null && __isset.Sex)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Sex: ");
        sb.Append(Sex);
      }
      if (WashingMethodPicture != null && __isset.WashingMethodPicture)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("WashingMethodPicture: ");
        sb.Append(WashingMethodPicture);
      }
      if (CategoryClass != null && __isset.CategoryClass)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CategoryClass: ");
        sb.Append(CategoryClass);
      }
      if (__isset.IsUploadK3)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IsUploadK3: ");
        sb.Append(IsUploadK3);
      }
      if (UploadK3Date != null && __isset.UploadK3Date)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UploadK3Date: ");
        sb.Append(UploadK3Date);
      }
      if (__isset.OwnerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OwnerId: ");
        sb.Append(OwnerId);
      }
      if (Design != null && __isset.Design)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Design: ");
        sb.Append(Design);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
