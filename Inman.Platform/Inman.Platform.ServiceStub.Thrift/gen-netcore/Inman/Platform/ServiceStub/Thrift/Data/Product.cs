/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Inman.Platform.ServiceStub.Thrift.Data
{

  public partial class Product : TBase
  {
    private int _Id;
    private int _ColorId;
    private int _GoodsId;
    private string _ProductSN;
    private string _PicturePath;
    private string _Remark;
    private int _AccountID;
    private bool _Deleted;
    private int _Enabled;
    private string _CreatedOn;
    private string _CreatedBy;
    private int _CreatedCustomerId;
    private string _ModifiedOn;
    private string _ModifiedBy;
    private int _ModifiedCustomerId;
    private int _OwnerId;
    private Goods _Goods;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public int ColorId
    {
      get
      {
        return _ColorId;
      }
      set
      {
        __isset.ColorId = true;
        this._ColorId = value;
      }
    }

    public int GoodsId
    {
      get
      {
        return _GoodsId;
      }
      set
      {
        __isset.GoodsId = true;
        this._GoodsId = value;
      }
    }

    public string ProductSN
    {
      get
      {
        return _ProductSN;
      }
      set
      {
        __isset.ProductSN = true;
        this._ProductSN = value;
      }
    }

    public string PicturePath
    {
      get
      {
        return _PicturePath;
      }
      set
      {
        __isset.PicturePath = true;
        this._PicturePath = value;
      }
    }

    public string Remark
    {
      get
      {
        return _Remark;
      }
      set
      {
        __isset.Remark = true;
        this._Remark = value;
      }
    }

    public int AccountID
    {
      get
      {
        return _AccountID;
      }
      set
      {
        __isset.AccountID = true;
        this._AccountID = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _Deleted;
      }
      set
      {
        __isset.Deleted = true;
        this._Deleted = value;
      }
    }

    public int Enabled
    {
      get
      {
        return _Enabled;
      }
      set
      {
        __isset.Enabled = true;
        this._Enabled = value;
      }
    }

    public string CreatedOn
    {
      get
      {
        return _CreatedOn;
      }
      set
      {
        __isset.CreatedOn = true;
        this._CreatedOn = value;
      }
    }

    public string CreatedBy
    {
      get
      {
        return _CreatedBy;
      }
      set
      {
        __isset.CreatedBy = true;
        this._CreatedBy = value;
      }
    }

    public int CreatedCustomerId
    {
      get
      {
        return _CreatedCustomerId;
      }
      set
      {
        __isset.CreatedCustomerId = true;
        this._CreatedCustomerId = value;
      }
    }

    public string ModifiedOn
    {
      get
      {
        return _ModifiedOn;
      }
      set
      {
        __isset.ModifiedOn = true;
        this._ModifiedOn = value;
      }
    }

    public string ModifiedBy
    {
      get
      {
        return _ModifiedBy;
      }
      set
      {
        __isset.ModifiedBy = true;
        this._ModifiedBy = value;
      }
    }

    public int ModifiedCustomerId
    {
      get
      {
        return _ModifiedCustomerId;
      }
      set
      {
        __isset.ModifiedCustomerId = true;
        this._ModifiedCustomerId = value;
      }
    }

    public int OwnerId
    {
      get
      {
        return _OwnerId;
      }
      set
      {
        __isset.OwnerId = true;
        this._OwnerId = value;
      }
    }

    public Goods Goods
    {
      get
      {
        return _Goods;
      }
      set
      {
        __isset.Goods = true;
        this._Goods = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Id;
      public bool ColorId;
      public bool GoodsId;
      public bool ProductSN;
      public bool PicturePath;
      public bool Remark;
      public bool AccountID;
      public bool Deleted;
      public bool Enabled;
      public bool CreatedOn;
      public bool CreatedBy;
      public bool CreatedCustomerId;
      public bool ModifiedOn;
      public bool ModifiedBy;
      public bool ModifiedCustomerId;
      public bool OwnerId;
      public bool Goods;
    }

    public Product()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                ColorId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                GoodsId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ProductSN = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                PicturePath = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Remark = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                AccountID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                Deleted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                Enabled = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                CreatedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                CreatedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I32)
              {
                CreatedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.String)
              {
                ModifiedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                ModifiedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.I32)
              {
                ModifiedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.I32)
              {
                OwnerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.Struct)
              {
                Goods = new Goods();
                await Goods.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Product");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.Id)
        {
          field.Name = "Id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ColorId)
        {
          field.Name = "ColorId";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ColorId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.GoodsId)
        {
          field.Name = "GoodsId";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(GoodsId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductSN != null && __isset.ProductSN)
        {
          field.Name = "ProductSN";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductSN, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PicturePath != null && __isset.PicturePath)
        {
          field.Name = "PicturePath";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(PicturePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Remark != null && __isset.Remark)
        {
          field.Name = "Remark";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Remark, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.AccountID)
        {
          field.Name = "AccountID";
          field.Type = TType.I32;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(AccountID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Deleted)
        {
          field.Name = "Deleted";
          field.Type = TType.Bool;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Deleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Enabled)
        {
          field.Name = "Enabled";
          field.Type = TType.I32;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Enabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedOn != null && __isset.CreatedOn)
        {
          field.Name = "CreatedOn";
          field.Type = TType.String;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedBy != null && __isset.CreatedBy)
        {
          field.Name = "CreatedBy";
          field.Type = TType.String;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.CreatedCustomerId)
        {
          field.Name = "CreatedCustomerId";
          field.Type = TType.I32;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(CreatedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedOn != null && __isset.ModifiedOn)
        {
          field.Name = "ModifiedOn";
          field.Type = TType.String;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedBy != null && __isset.ModifiedBy)
        {
          field.Name = "ModifiedBy";
          field.Type = TType.String;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ModifiedCustomerId)
        {
          field.Name = "ModifiedCustomerId";
          field.Type = TType.I32;
          field.ID = 15;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ModifiedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.OwnerId)
        {
          field.Name = "OwnerId";
          field.Type = TType.I32;
          field.ID = 16;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(OwnerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Goods != null && __isset.Goods)
        {
          field.Name = "Goods";
          field.Type = TType.Struct;
          field.ID = 17;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Goods.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Product(");
      bool __first = true;
      if (__isset.Id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.ColorId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ColorId: ");
        sb.Append(ColorId);
      }
      if (__isset.GoodsId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("GoodsId: ");
        sb.Append(GoodsId);
      }
      if (ProductSN != null && __isset.ProductSN)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductSN: ");
        sb.Append(ProductSN);
      }
      if (PicturePath != null && __isset.PicturePath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PicturePath: ");
        sb.Append(PicturePath);
      }
      if (Remark != null && __isset.Remark)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Remark: ");
        sb.Append(Remark);
      }
      if (__isset.AccountID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AccountID: ");
        sb.Append(AccountID);
      }
      if (__isset.Deleted)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Deleted: ");
        sb.Append(Deleted);
      }
      if (__isset.Enabled)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Enabled: ");
        sb.Append(Enabled);
      }
      if (CreatedOn != null && __isset.CreatedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedOn: ");
        sb.Append(CreatedOn);
      }
      if (CreatedBy != null && __isset.CreatedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedBy: ");
        sb.Append(CreatedBy);
      }
      if (__isset.CreatedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedCustomerId: ");
        sb.Append(CreatedCustomerId);
      }
      if (ModifiedOn != null && __isset.ModifiedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedOn: ");
        sb.Append(ModifiedOn);
      }
      if (ModifiedBy != null && __isset.ModifiedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedBy: ");
        sb.Append(ModifiedBy);
      }
      if (__isset.ModifiedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedCustomerId: ");
        sb.Append(ModifiedCustomerId);
      }
      if (__isset.OwnerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OwnerId: ");
        sb.Append(OwnerId);
      }
      if (Goods != null && __isset.Goods)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Goods: ");
        sb.Append(Goods);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
