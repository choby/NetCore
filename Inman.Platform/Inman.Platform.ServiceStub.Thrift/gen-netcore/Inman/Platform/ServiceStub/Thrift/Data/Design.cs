/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Inman.Platform.ServiceStub.Thrift.Data
{

  public partial class Design : TBase
  {
    private int _Id;
    private int _DevYear;
    private string _DesignGroup;
    private string _DesignSeason;
    private string _Theme;
    private string _Collection;
    private string _DesignAssistantName;
    private string _DesignProductSN;
    private string _ProductName;
    private string _CommitProductNameDate;
    private string _Material;
    private string _Technology;
    private string _Collar;
    private string _Shape;
    private string _ClothesLong;
    private string _SleeveShape;
    private string _SleeveLong;
    private string _TypeDecomposition;
    private string _Particulars;
    private string _Aekbuh;
    private string _SkirtLong;
    private string _WaistShape;
    private string _Element;
    private string _TrousersShape;
    private string _Outseam;
    private string _Peplum;
    private string _Commission;
    private string _PicturePath;
    private string _Status;
    private string _Batch;
    private string _UpnewDate;
    private string _Remark;
    private int _SortCode;
    private int _AccountID;
    private bool _Deleted;
    private int _Enabled;
    private string _CreatedOn;
    private string _CreatedBy;
    private int _CreatedCustomerId;
    private string _ModifiedOn;
    private string _ModifiedBy;
    private int _ModifiedCustomerId;
    private int _SizeCateId;
    private string _IsMainPush;
    private string _WaveSession;
    private string _Gender;
    private string _DesignCate;
    private int _OwnerId;
    private string _DesignSource;
    private string _PriceRange;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public int DevYear
    {
      get
      {
        return _DevYear;
      }
      set
      {
        __isset.DevYear = true;
        this._DevYear = value;
      }
    }

    public string DesignGroup
    {
      get
      {
        return _DesignGroup;
      }
      set
      {
        __isset.DesignGroup = true;
        this._DesignGroup = value;
      }
    }

    public string DesignSeason
    {
      get
      {
        return _DesignSeason;
      }
      set
      {
        __isset.DesignSeason = true;
        this._DesignSeason = value;
      }
    }

    public string Theme
    {
      get
      {
        return _Theme;
      }
      set
      {
        __isset.Theme = true;
        this._Theme = value;
      }
    }

    public string Collection
    {
      get
      {
        return _Collection;
      }
      set
      {
        __isset.Collection = true;
        this._Collection = value;
      }
    }

    public string DesignAssistantName
    {
      get
      {
        return _DesignAssistantName;
      }
      set
      {
        __isset.DesignAssistantName = true;
        this._DesignAssistantName = value;
      }
    }

    public string DesignProductSN
    {
      get
      {
        return _DesignProductSN;
      }
      set
      {
        __isset.DesignProductSN = true;
        this._DesignProductSN = value;
      }
    }

    public string ProductName
    {
      get
      {
        return _ProductName;
      }
      set
      {
        __isset.ProductName = true;
        this._ProductName = value;
      }
    }

    public string CommitProductNameDate
    {
      get
      {
        return _CommitProductNameDate;
      }
      set
      {
        __isset.CommitProductNameDate = true;
        this._CommitProductNameDate = value;
      }
    }

    public string Material
    {
      get
      {
        return _Material;
      }
      set
      {
        __isset.Material = true;
        this._Material = value;
      }
    }

    public string Technology
    {
      get
      {
        return _Technology;
      }
      set
      {
        __isset.Technology = true;
        this._Technology = value;
      }
    }

    public string Collar
    {
      get
      {
        return _Collar;
      }
      set
      {
        __isset.Collar = true;
        this._Collar = value;
      }
    }

    public string Shape
    {
      get
      {
        return _Shape;
      }
      set
      {
        __isset.Shape = true;
        this._Shape = value;
      }
    }

    public string ClothesLong
    {
      get
      {
        return _ClothesLong;
      }
      set
      {
        __isset.ClothesLong = true;
        this._ClothesLong = value;
      }
    }

    public string SleeveShape
    {
      get
      {
        return _SleeveShape;
      }
      set
      {
        __isset.SleeveShape = true;
        this._SleeveShape = value;
      }
    }

    public string SleeveLong
    {
      get
      {
        return _SleeveLong;
      }
      set
      {
        __isset.SleeveLong = true;
        this._SleeveLong = value;
      }
    }

    public string TypeDecomposition
    {
      get
      {
        return _TypeDecomposition;
      }
      set
      {
        __isset.TypeDecomposition = true;
        this._TypeDecomposition = value;
      }
    }

    public string Particulars
    {
      get
      {
        return _Particulars;
      }
      set
      {
        __isset.Particulars = true;
        this._Particulars = value;
      }
    }

    public string Aekbuh
    {
      get
      {
        return _Aekbuh;
      }
      set
      {
        __isset.Aekbuh = true;
        this._Aekbuh = value;
      }
    }

    public string SkirtLong
    {
      get
      {
        return _SkirtLong;
      }
      set
      {
        __isset.SkirtLong = true;
        this._SkirtLong = value;
      }
    }

    public string WaistShape
    {
      get
      {
        return _WaistShape;
      }
      set
      {
        __isset.WaistShape = true;
        this._WaistShape = value;
      }
    }

    public string Element
    {
      get
      {
        return _Element;
      }
      set
      {
        __isset.Element = true;
        this._Element = value;
      }
    }

    public string TrousersShape
    {
      get
      {
        return _TrousersShape;
      }
      set
      {
        __isset.TrousersShape = true;
        this._TrousersShape = value;
      }
    }

    public string Outseam
    {
      get
      {
        return _Outseam;
      }
      set
      {
        __isset.Outseam = true;
        this._Outseam = value;
      }
    }

    public string Peplum
    {
      get
      {
        return _Peplum;
      }
      set
      {
        __isset.Peplum = true;
        this._Peplum = value;
      }
    }

    public string Commission
    {
      get
      {
        return _Commission;
      }
      set
      {
        __isset.Commission = true;
        this._Commission = value;
      }
    }

    public string PicturePath
    {
      get
      {
        return _PicturePath;
      }
      set
      {
        __isset.PicturePath = true;
        this._PicturePath = value;
      }
    }

    public string Status
    {
      get
      {
        return _Status;
      }
      set
      {
        __isset.Status = true;
        this._Status = value;
      }
    }

    public string Batch
    {
      get
      {
        return _Batch;
      }
      set
      {
        __isset.Batch = true;
        this._Batch = value;
      }
    }

    public string UpnewDate
    {
      get
      {
        return _UpnewDate;
      }
      set
      {
        __isset.UpnewDate = true;
        this._UpnewDate = value;
      }
    }

    public string Remark
    {
      get
      {
        return _Remark;
      }
      set
      {
        __isset.Remark = true;
        this._Remark = value;
      }
    }

    public int SortCode
    {
      get
      {
        return _SortCode;
      }
      set
      {
        __isset.SortCode = true;
        this._SortCode = value;
      }
    }

    public int AccountID
    {
      get
      {
        return _AccountID;
      }
      set
      {
        __isset.AccountID = true;
        this._AccountID = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _Deleted;
      }
      set
      {
        __isset.Deleted = true;
        this._Deleted = value;
      }
    }

    public int Enabled
    {
      get
      {
        return _Enabled;
      }
      set
      {
        __isset.Enabled = true;
        this._Enabled = value;
      }
    }

    public string CreatedOn
    {
      get
      {
        return _CreatedOn;
      }
      set
      {
        __isset.CreatedOn = true;
        this._CreatedOn = value;
      }
    }

    public string CreatedBy
    {
      get
      {
        return _CreatedBy;
      }
      set
      {
        __isset.CreatedBy = true;
        this._CreatedBy = value;
      }
    }

    public int CreatedCustomerId
    {
      get
      {
        return _CreatedCustomerId;
      }
      set
      {
        __isset.CreatedCustomerId = true;
        this._CreatedCustomerId = value;
      }
    }

    public string ModifiedOn
    {
      get
      {
        return _ModifiedOn;
      }
      set
      {
        __isset.ModifiedOn = true;
        this._ModifiedOn = value;
      }
    }

    public string ModifiedBy
    {
      get
      {
        return _ModifiedBy;
      }
      set
      {
        __isset.ModifiedBy = true;
        this._ModifiedBy = value;
      }
    }

    public int ModifiedCustomerId
    {
      get
      {
        return _ModifiedCustomerId;
      }
      set
      {
        __isset.ModifiedCustomerId = true;
        this._ModifiedCustomerId = value;
      }
    }

    public int SizeCateId
    {
      get
      {
        return _SizeCateId;
      }
      set
      {
        __isset.SizeCateId = true;
        this._SizeCateId = value;
      }
    }

    public string IsMainPush
    {
      get
      {
        return _IsMainPush;
      }
      set
      {
        __isset.IsMainPush = true;
        this._IsMainPush = value;
      }
    }

    public string WaveSession
    {
      get
      {
        return _WaveSession;
      }
      set
      {
        __isset.WaveSession = true;
        this._WaveSession = value;
      }
    }

    public string Gender
    {
      get
      {
        return _Gender;
      }
      set
      {
        __isset.Gender = true;
        this._Gender = value;
      }
    }

    public string DesignCate
    {
      get
      {
        return _DesignCate;
      }
      set
      {
        __isset.DesignCate = true;
        this._DesignCate = value;
      }
    }

    public int OwnerId
    {
      get
      {
        return _OwnerId;
      }
      set
      {
        __isset.OwnerId = true;
        this._OwnerId = value;
      }
    }

    public string DesignSource
    {
      get
      {
        return _DesignSource;
      }
      set
      {
        __isset.DesignSource = true;
        this._DesignSource = value;
      }
    }

    public string PriceRange
    {
      get
      {
        return _PriceRange;
      }
      set
      {
        __isset.PriceRange = true;
        this._PriceRange = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Id;
      public bool DevYear;
      public bool DesignGroup;
      public bool DesignSeason;
      public bool Theme;
      public bool Collection;
      public bool DesignAssistantName;
      public bool DesignProductSN;
      public bool ProductName;
      public bool CommitProductNameDate;
      public bool Material;
      public bool Technology;
      public bool Collar;
      public bool Shape;
      public bool ClothesLong;
      public bool SleeveShape;
      public bool SleeveLong;
      public bool TypeDecomposition;
      public bool Particulars;
      public bool Aekbuh;
      public bool SkirtLong;
      public bool WaistShape;
      public bool Element;
      public bool TrousersShape;
      public bool Outseam;
      public bool Peplum;
      public bool Commission;
      public bool PicturePath;
      public bool Status;
      public bool Batch;
      public bool UpnewDate;
      public bool Remark;
      public bool SortCode;
      public bool AccountID;
      public bool Deleted;
      public bool Enabled;
      public bool CreatedOn;
      public bool CreatedBy;
      public bool CreatedCustomerId;
      public bool ModifiedOn;
      public bool ModifiedBy;
      public bool ModifiedCustomerId;
      public bool SizeCateId;
      public bool IsMainPush;
      public bool WaveSession;
      public bool Gender;
      public bool DesignCate;
      public bool OwnerId;
      public bool DesignSource;
      public bool PriceRange;
    }

    public Design()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                DevYear = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                DesignGroup = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                DesignSeason = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Theme = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Collection = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                DesignAssistantName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                DesignProductSN = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                ProductName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                CommitProductNameDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                Material = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                Technology = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.String)
              {
                Collar = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                Shape = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.String)
              {
                ClothesLong = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.String)
              {
                SleeveShape = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.String)
              {
                SleeveLong = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.String)
              {
                TypeDecomposition = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.String)
              {
                Particulars = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.String)
              {
                Aekbuh = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.String)
              {
                SkirtLong = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.String)
              {
                WaistShape = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.String)
              {
                Element = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.String)
              {
                TrousersShape = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 25:
              if (field.Type == TType.String)
              {
                Outseam = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 26:
              if (field.Type == TType.String)
              {
                Peplum = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 27:
              if (field.Type == TType.String)
              {
                Commission = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 28:
              if (field.Type == TType.String)
              {
                PicturePath = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 29:
              if (field.Type == TType.String)
              {
                Status = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 30:
              if (field.Type == TType.String)
              {
                Batch = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 31:
              if (field.Type == TType.String)
              {
                UpnewDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 32:
              if (field.Type == TType.String)
              {
                Remark = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 33:
              if (field.Type == TType.I32)
              {
                SortCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 34:
              if (field.Type == TType.I32)
              {
                AccountID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 35:
              if (field.Type == TType.Bool)
              {
                Deleted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 36:
              if (field.Type == TType.I32)
              {
                Enabled = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 37:
              if (field.Type == TType.String)
              {
                CreatedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 38:
              if (field.Type == TType.String)
              {
                CreatedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 39:
              if (field.Type == TType.I32)
              {
                CreatedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 40:
              if (field.Type == TType.String)
              {
                ModifiedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 41:
              if (field.Type == TType.String)
              {
                ModifiedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 42:
              if (field.Type == TType.I32)
              {
                ModifiedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 43:
              if (field.Type == TType.I32)
              {
                SizeCateId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 44:
              if (field.Type == TType.String)
              {
                IsMainPush = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 45:
              if (field.Type == TType.String)
              {
                WaveSession = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 46:
              if (field.Type == TType.String)
              {
                Gender = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 47:
              if (field.Type == TType.String)
              {
                DesignCate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 48:
              if (field.Type == TType.I32)
              {
                OwnerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 49:
              if (field.Type == TType.String)
              {
                DesignSource = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 50:
              if (field.Type == TType.String)
              {
                PriceRange = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Design");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.Id)
        {
          field.Name = "Id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DevYear)
        {
          field.Name = "DevYear";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(DevYear, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DesignGroup != null && __isset.DesignGroup)
        {
          field.Name = "DesignGroup";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DesignGroup, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DesignSeason != null && __isset.DesignSeason)
        {
          field.Name = "DesignSeason";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DesignSeason, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Theme != null && __isset.Theme)
        {
          field.Name = "Theme";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Theme, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Collection != null && __isset.Collection)
        {
          field.Name = "Collection";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Collection, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DesignAssistantName != null && __isset.DesignAssistantName)
        {
          field.Name = "DesignAssistantName";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DesignAssistantName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DesignProductSN != null && __isset.DesignProductSN)
        {
          field.Name = "DesignProductSN";
          field.Type = TType.String;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DesignProductSN, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProductName != null && __isset.ProductName)
        {
          field.Name = "ProductName";
          field.Type = TType.String;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProductName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CommitProductNameDate != null && __isset.CommitProductNameDate)
        {
          field.Name = "CommitProductNameDate";
          field.Type = TType.String;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CommitProductNameDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Material != null && __isset.Material)
        {
          field.Name = "Material";
          field.Type = TType.String;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Material, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Technology != null && __isset.Technology)
        {
          field.Name = "Technology";
          field.Type = TType.String;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Technology, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Collar != null && __isset.Collar)
        {
          field.Name = "Collar";
          field.Type = TType.String;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Collar, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Shape != null && __isset.Shape)
        {
          field.Name = "Shape";
          field.Type = TType.String;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Shape, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ClothesLong != null && __isset.ClothesLong)
        {
          field.Name = "ClothesLong";
          field.Type = TType.String;
          field.ID = 15;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ClothesLong, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SleeveShape != null && __isset.SleeveShape)
        {
          field.Name = "SleeveShape";
          field.Type = TType.String;
          field.ID = 16;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SleeveShape, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SleeveLong != null && __isset.SleeveLong)
        {
          field.Name = "SleeveLong";
          field.Type = TType.String;
          field.ID = 17;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SleeveLong, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TypeDecomposition != null && __isset.TypeDecomposition)
        {
          field.Name = "TypeDecomposition";
          field.Type = TType.String;
          field.ID = 18;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(TypeDecomposition, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Particulars != null && __isset.Particulars)
        {
          field.Name = "Particulars";
          field.Type = TType.String;
          field.ID = 19;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Particulars, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Aekbuh != null && __isset.Aekbuh)
        {
          field.Name = "Aekbuh";
          field.Type = TType.String;
          field.ID = 20;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Aekbuh, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SkirtLong != null && __isset.SkirtLong)
        {
          field.Name = "SkirtLong";
          field.Type = TType.String;
          field.ID = 21;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SkirtLong, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (WaistShape != null && __isset.WaistShape)
        {
          field.Name = "WaistShape";
          field.Type = TType.String;
          field.ID = 22;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(WaistShape, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Element != null && __isset.Element)
        {
          field.Name = "Element";
          field.Type = TType.String;
          field.ID = 23;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Element, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TrousersShape != null && __isset.TrousersShape)
        {
          field.Name = "TrousersShape";
          field.Type = TType.String;
          field.ID = 24;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(TrousersShape, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Outseam != null && __isset.Outseam)
        {
          field.Name = "Outseam";
          field.Type = TType.String;
          field.ID = 25;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Outseam, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Peplum != null && __isset.Peplum)
        {
          field.Name = "Peplum";
          field.Type = TType.String;
          field.ID = 26;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Peplum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Commission != null && __isset.Commission)
        {
          field.Name = "Commission";
          field.Type = TType.String;
          field.ID = 27;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Commission, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PicturePath != null && __isset.PicturePath)
        {
          field.Name = "PicturePath";
          field.Type = TType.String;
          field.ID = 28;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(PicturePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Status != null && __isset.Status)
        {
          field.Name = "Status";
          field.Type = TType.String;
          field.ID = 29;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Batch != null && __isset.Batch)
        {
          field.Name = "Batch";
          field.Type = TType.String;
          field.ID = 30;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Batch, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UpnewDate != null && __isset.UpnewDate)
        {
          field.Name = "UpnewDate";
          field.Type = TType.String;
          field.ID = 31;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UpnewDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Remark != null && __isset.Remark)
        {
          field.Name = "Remark";
          field.Type = TType.String;
          field.ID = 32;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Remark, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.SortCode)
        {
          field.Name = "SortCode";
          field.Type = TType.I32;
          field.ID = 33;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(SortCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.AccountID)
        {
          field.Name = "AccountID";
          field.Type = TType.I32;
          field.ID = 34;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(AccountID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Deleted)
        {
          field.Name = "Deleted";
          field.Type = TType.Bool;
          field.ID = 35;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Deleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Enabled)
        {
          field.Name = "Enabled";
          field.Type = TType.I32;
          field.ID = 36;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Enabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedOn != null && __isset.CreatedOn)
        {
          field.Name = "CreatedOn";
          field.Type = TType.String;
          field.ID = 37;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedBy != null && __isset.CreatedBy)
        {
          field.Name = "CreatedBy";
          field.Type = TType.String;
          field.ID = 38;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.CreatedCustomerId)
        {
          field.Name = "CreatedCustomerId";
          field.Type = TType.I32;
          field.ID = 39;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(CreatedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedOn != null && __isset.ModifiedOn)
        {
          field.Name = "ModifiedOn";
          field.Type = TType.String;
          field.ID = 40;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedBy != null && __isset.ModifiedBy)
        {
          field.Name = "ModifiedBy";
          field.Type = TType.String;
          field.ID = 41;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ModifiedCustomerId)
        {
          field.Name = "ModifiedCustomerId";
          field.Type = TType.I32;
          field.ID = 42;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ModifiedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.SizeCateId)
        {
          field.Name = "SizeCateId";
          field.Type = TType.I32;
          field.ID = 43;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(SizeCateId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (IsMainPush != null && __isset.IsMainPush)
        {
          field.Name = "IsMainPush";
          field.Type = TType.String;
          field.ID = 44;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(IsMainPush, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (WaveSession != null && __isset.WaveSession)
        {
          field.Name = "WaveSession";
          field.Type = TType.String;
          field.ID = 45;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(WaveSession, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Gender != null && __isset.Gender)
        {
          field.Name = "Gender";
          field.Type = TType.String;
          field.ID = 46;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Gender, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DesignCate != null && __isset.DesignCate)
        {
          field.Name = "DesignCate";
          field.Type = TType.String;
          field.ID = 47;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DesignCate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.OwnerId)
        {
          field.Name = "OwnerId";
          field.Type = TType.I32;
          field.ID = 48;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(OwnerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DesignSource != null && __isset.DesignSource)
        {
          field.Name = "DesignSource";
          field.Type = TType.String;
          field.ID = 49;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DesignSource, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PriceRange != null && __isset.PriceRange)
        {
          field.Name = "PriceRange";
          field.Type = TType.String;
          field.ID = 50;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(PriceRange, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Design(");
      bool __first = true;
      if (__isset.Id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.DevYear)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DevYear: ");
        sb.Append(DevYear);
      }
      if (DesignGroup != null && __isset.DesignGroup)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignGroup: ");
        sb.Append(DesignGroup);
      }
      if (DesignSeason != null && __isset.DesignSeason)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignSeason: ");
        sb.Append(DesignSeason);
      }
      if (Theme != null && __isset.Theme)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Theme: ");
        sb.Append(Theme);
      }
      if (Collection != null && __isset.Collection)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Collection: ");
        sb.Append(Collection);
      }
      if (DesignAssistantName != null && __isset.DesignAssistantName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignAssistantName: ");
        sb.Append(DesignAssistantName);
      }
      if (DesignProductSN != null && __isset.DesignProductSN)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignProductSN: ");
        sb.Append(DesignProductSN);
      }
      if (ProductName != null && __isset.ProductName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProductName: ");
        sb.Append(ProductName);
      }
      if (CommitProductNameDate != null && __isset.CommitProductNameDate)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CommitProductNameDate: ");
        sb.Append(CommitProductNameDate);
      }
      if (Material != null && __isset.Material)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Material: ");
        sb.Append(Material);
      }
      if (Technology != null && __isset.Technology)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Technology: ");
        sb.Append(Technology);
      }
      if (Collar != null && __isset.Collar)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Collar: ");
        sb.Append(Collar);
      }
      if (Shape != null && __isset.Shape)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Shape: ");
        sb.Append(Shape);
      }
      if (ClothesLong != null && __isset.ClothesLong)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ClothesLong: ");
        sb.Append(ClothesLong);
      }
      if (SleeveShape != null && __isset.SleeveShape)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SleeveShape: ");
        sb.Append(SleeveShape);
      }
      if (SleeveLong != null && __isset.SleeveLong)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SleeveLong: ");
        sb.Append(SleeveLong);
      }
      if (TypeDecomposition != null && __isset.TypeDecomposition)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TypeDecomposition: ");
        sb.Append(TypeDecomposition);
      }
      if (Particulars != null && __isset.Particulars)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Particulars: ");
        sb.Append(Particulars);
      }
      if (Aekbuh != null && __isset.Aekbuh)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Aekbuh: ");
        sb.Append(Aekbuh);
      }
      if (SkirtLong != null && __isset.SkirtLong)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SkirtLong: ");
        sb.Append(SkirtLong);
      }
      if (WaistShape != null && __isset.WaistShape)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("WaistShape: ");
        sb.Append(WaistShape);
      }
      if (Element != null && __isset.Element)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Element: ");
        sb.Append(Element);
      }
      if (TrousersShape != null && __isset.TrousersShape)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrousersShape: ");
        sb.Append(TrousersShape);
      }
      if (Outseam != null && __isset.Outseam)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Outseam: ");
        sb.Append(Outseam);
      }
      if (Peplum != null && __isset.Peplum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Peplum: ");
        sb.Append(Peplum);
      }
      if (Commission != null && __isset.Commission)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Commission: ");
        sb.Append(Commission);
      }
      if (PicturePath != null && __isset.PicturePath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PicturePath: ");
        sb.Append(PicturePath);
      }
      if (Status != null && __isset.Status)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Status: ");
        sb.Append(Status);
      }
      if (Batch != null && __isset.Batch)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Batch: ");
        sb.Append(Batch);
      }
      if (UpnewDate != null && __isset.UpnewDate)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UpnewDate: ");
        sb.Append(UpnewDate);
      }
      if (Remark != null && __isset.Remark)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Remark: ");
        sb.Append(Remark);
      }
      if (__isset.SortCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SortCode: ");
        sb.Append(SortCode);
      }
      if (__isset.AccountID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AccountID: ");
        sb.Append(AccountID);
      }
      if (__isset.Deleted)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Deleted: ");
        sb.Append(Deleted);
      }
      if (__isset.Enabled)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Enabled: ");
        sb.Append(Enabled);
      }
      if (CreatedOn != null && __isset.CreatedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedOn: ");
        sb.Append(CreatedOn);
      }
      if (CreatedBy != null && __isset.CreatedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedBy: ");
        sb.Append(CreatedBy);
      }
      if (__isset.CreatedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedCustomerId: ");
        sb.Append(CreatedCustomerId);
      }
      if (ModifiedOn != null && __isset.ModifiedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedOn: ");
        sb.Append(ModifiedOn);
      }
      if (ModifiedBy != null && __isset.ModifiedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedBy: ");
        sb.Append(ModifiedBy);
      }
      if (__isset.ModifiedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedCustomerId: ");
        sb.Append(ModifiedCustomerId);
      }
      if (__isset.SizeCateId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SizeCateId: ");
        sb.Append(SizeCateId);
      }
      if (IsMainPush != null && __isset.IsMainPush)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IsMainPush: ");
        sb.Append(IsMainPush);
      }
      if (WaveSession != null && __isset.WaveSession)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("WaveSession: ");
        sb.Append(WaveSession);
      }
      if (Gender != null && __isset.Gender)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Gender: ");
        sb.Append(Gender);
      }
      if (DesignCate != null && __isset.DesignCate)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignCate: ");
        sb.Append(DesignCate);
      }
      if (__isset.OwnerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OwnerId: ");
        sb.Append(OwnerId);
      }
      if (DesignSource != null && __isset.DesignSource)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DesignSource: ");
        sb.Append(DesignSource);
      }
      if (PriceRange != null && __isset.PriceRange)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PriceRange: ");
        sb.Append(PriceRange);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
