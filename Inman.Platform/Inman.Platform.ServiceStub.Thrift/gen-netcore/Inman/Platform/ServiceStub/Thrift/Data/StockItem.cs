/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Inman.Platform.ServiceStub.Thrift.Data
{

  public partial class StockItem : TBase
  {
    private int _Id;
    private int _SupplierID;
    private int _ColorID;
    private int _ItemCategoryId1;
    private int _ItemCategoryId2;
    private int _ItemCategoryId3;
    private string _FirstYear;
    private string _FirstSeason;
    private string _DevMonth;
    private string _Developer;
    private string _ItemCode;
    private string _ItemCode2;
    private string _ColorCode;
    private string _ItemName;
    private string _ItemSpec;
    private int _BuyerId;
    private int _Buyer;
    private double _Price;
    private double _DevPrice;
    private double _ExclusiveTaxPrice;
    private double _DevExclusiveTaxPrice;
    private double _ExclusiveTaxPriceAgent;
    private double _PriceAgent;
    private double _KGPrice;
    private string _Unit;
    private string _Component;
    private double _LateralContraction;
    private double _DirectContraction;
    private double _ItemWidth;
    private double _Weight;
    private double _KilogramMeter;
    private string _DaysSupply;
    private double _MOQ;
    private double _UpperInventory;
    private double _BelowInventory;
    private string _SupplierItemCode;
    private string _SupplierItemColor;
    private string _Remark;
    private string _PicturePath;
    private bool _HaveApproveDevPrice;
    private bool _HaveApprovePrice;
    private string _Brand;
    private string _DevType;
    private int _SortCode;
    private bool _Enabled;
    private bool _Deleted;
    private int _AccountID;
    private string _CreatedOn;
    private string _CreatedBy;
    private int _CreatedCustomerId;
    private string _ModifiedOn;
    private string _ModifiedBy;
    private int _ModifiedCustomerId;
    private string _ApprovalPriceRemark;
    private int _ExemptionState;
    private int _OwnerId;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public int SupplierID
    {
      get
      {
        return _SupplierID;
      }
      set
      {
        __isset.SupplierID = true;
        this._SupplierID = value;
      }
    }

    public int ColorID
    {
      get
      {
        return _ColorID;
      }
      set
      {
        __isset.ColorID = true;
        this._ColorID = value;
      }
    }

    public int ItemCategoryId1
    {
      get
      {
        return _ItemCategoryId1;
      }
      set
      {
        __isset.ItemCategoryId1 = true;
        this._ItemCategoryId1 = value;
      }
    }

    public int ItemCategoryId2
    {
      get
      {
        return _ItemCategoryId2;
      }
      set
      {
        __isset.ItemCategoryId2 = true;
        this._ItemCategoryId2 = value;
      }
    }

    public int ItemCategoryId3
    {
      get
      {
        return _ItemCategoryId3;
      }
      set
      {
        __isset.ItemCategoryId3 = true;
        this._ItemCategoryId3 = value;
      }
    }

    public string FirstYear
    {
      get
      {
        return _FirstYear;
      }
      set
      {
        __isset.FirstYear = true;
        this._FirstYear = value;
      }
    }

    public string FirstSeason
    {
      get
      {
        return _FirstSeason;
      }
      set
      {
        __isset.FirstSeason = true;
        this._FirstSeason = value;
      }
    }

    public string DevMonth
    {
      get
      {
        return _DevMonth;
      }
      set
      {
        __isset.DevMonth = true;
        this._DevMonth = value;
      }
    }

    public string Developer
    {
      get
      {
        return _Developer;
      }
      set
      {
        __isset.Developer = true;
        this._Developer = value;
      }
    }

    public string ItemCode
    {
      get
      {
        return _ItemCode;
      }
      set
      {
        __isset.ItemCode = true;
        this._ItemCode = value;
      }
    }

    public string ItemCode2
    {
      get
      {
        return _ItemCode2;
      }
      set
      {
        __isset.ItemCode2 = true;
        this._ItemCode2 = value;
      }
    }

    public string ColorCode
    {
      get
      {
        return _ColorCode;
      }
      set
      {
        __isset.ColorCode = true;
        this._ColorCode = value;
      }
    }

    public string ItemName
    {
      get
      {
        return _ItemName;
      }
      set
      {
        __isset.ItemName = true;
        this._ItemName = value;
      }
    }

    public string ItemSpec
    {
      get
      {
        return _ItemSpec;
      }
      set
      {
        __isset.ItemSpec = true;
        this._ItemSpec = value;
      }
    }

    public int BuyerId
    {
      get
      {
        return _BuyerId;
      }
      set
      {
        __isset.BuyerId = true;
        this._BuyerId = value;
      }
    }

    public int Buyer
    {
      get
      {
        return _Buyer;
      }
      set
      {
        __isset.Buyer = true;
        this._Buyer = value;
      }
    }

    public double Price
    {
      get
      {
        return _Price;
      }
      set
      {
        __isset.Price = true;
        this._Price = value;
      }
    }

    public double DevPrice
    {
      get
      {
        return _DevPrice;
      }
      set
      {
        __isset.DevPrice = true;
        this._DevPrice = value;
      }
    }

    public double ExclusiveTaxPrice
    {
      get
      {
        return _ExclusiveTaxPrice;
      }
      set
      {
        __isset.ExclusiveTaxPrice = true;
        this._ExclusiveTaxPrice = value;
      }
    }

    public double DevExclusiveTaxPrice
    {
      get
      {
        return _DevExclusiveTaxPrice;
      }
      set
      {
        __isset.DevExclusiveTaxPrice = true;
        this._DevExclusiveTaxPrice = value;
      }
    }

    public double ExclusiveTaxPriceAgent
    {
      get
      {
        return _ExclusiveTaxPriceAgent;
      }
      set
      {
        __isset.ExclusiveTaxPriceAgent = true;
        this._ExclusiveTaxPriceAgent = value;
      }
    }

    public double PriceAgent
    {
      get
      {
        return _PriceAgent;
      }
      set
      {
        __isset.PriceAgent = true;
        this._PriceAgent = value;
      }
    }

    public double KGPrice
    {
      get
      {
        return _KGPrice;
      }
      set
      {
        __isset.KGPrice = true;
        this._KGPrice = value;
      }
    }

    public string Unit
    {
      get
      {
        return _Unit;
      }
      set
      {
        __isset.Unit = true;
        this._Unit = value;
      }
    }

    public string Component
    {
      get
      {
        return _Component;
      }
      set
      {
        __isset.Component = true;
        this._Component = value;
      }
    }

    public double LateralContraction
    {
      get
      {
        return _LateralContraction;
      }
      set
      {
        __isset.LateralContraction = true;
        this._LateralContraction = value;
      }
    }

    public double DirectContraction
    {
      get
      {
        return _DirectContraction;
      }
      set
      {
        __isset.DirectContraction = true;
        this._DirectContraction = value;
      }
    }

    public double ItemWidth
    {
      get
      {
        return _ItemWidth;
      }
      set
      {
        __isset.ItemWidth = true;
        this._ItemWidth = value;
      }
    }

    public double Weight
    {
      get
      {
        return _Weight;
      }
      set
      {
        __isset.Weight = true;
        this._Weight = value;
      }
    }

    public double KilogramMeter
    {
      get
      {
        return _KilogramMeter;
      }
      set
      {
        __isset.KilogramMeter = true;
        this._KilogramMeter = value;
      }
    }

    public string DaysSupply
    {
      get
      {
        return _DaysSupply;
      }
      set
      {
        __isset.DaysSupply = true;
        this._DaysSupply = value;
      }
    }

    public double MOQ
    {
      get
      {
        return _MOQ;
      }
      set
      {
        __isset.MOQ = true;
        this._MOQ = value;
      }
    }

    public double UpperInventory
    {
      get
      {
        return _UpperInventory;
      }
      set
      {
        __isset.UpperInventory = true;
        this._UpperInventory = value;
      }
    }

    public double BelowInventory
    {
      get
      {
        return _BelowInventory;
      }
      set
      {
        __isset.BelowInventory = true;
        this._BelowInventory = value;
      }
    }

    public string SupplierItemCode
    {
      get
      {
        return _SupplierItemCode;
      }
      set
      {
        __isset.SupplierItemCode = true;
        this._SupplierItemCode = value;
      }
    }

    public string SupplierItemColor
    {
      get
      {
        return _SupplierItemColor;
      }
      set
      {
        __isset.SupplierItemColor = true;
        this._SupplierItemColor = value;
      }
    }

    public string Remark
    {
      get
      {
        return _Remark;
      }
      set
      {
        __isset.Remark = true;
        this._Remark = value;
      }
    }

    public string PicturePath
    {
      get
      {
        return _PicturePath;
      }
      set
      {
        __isset.PicturePath = true;
        this._PicturePath = value;
      }
    }

    public bool HaveApproveDevPrice
    {
      get
      {
        return _HaveApproveDevPrice;
      }
      set
      {
        __isset.HaveApproveDevPrice = true;
        this._HaveApproveDevPrice = value;
      }
    }

    public bool HaveApprovePrice
    {
      get
      {
        return _HaveApprovePrice;
      }
      set
      {
        __isset.HaveApprovePrice = true;
        this._HaveApprovePrice = value;
      }
    }

    public string Brand
    {
      get
      {
        return _Brand;
      }
      set
      {
        __isset.Brand = true;
        this._Brand = value;
      }
    }

    public string DevType
    {
      get
      {
        return _DevType;
      }
      set
      {
        __isset.DevType = true;
        this._DevType = value;
      }
    }

    public int SortCode
    {
      get
      {
        return _SortCode;
      }
      set
      {
        __isset.SortCode = true;
        this._SortCode = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _Enabled;
      }
      set
      {
        __isset.Enabled = true;
        this._Enabled = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _Deleted;
      }
      set
      {
        __isset.Deleted = true;
        this._Deleted = value;
      }
    }

    public int AccountID
    {
      get
      {
        return _AccountID;
      }
      set
      {
        __isset.AccountID = true;
        this._AccountID = value;
      }
    }

    public string CreatedOn
    {
      get
      {
        return _CreatedOn;
      }
      set
      {
        __isset.CreatedOn = true;
        this._CreatedOn = value;
      }
    }

    public string CreatedBy
    {
      get
      {
        return _CreatedBy;
      }
      set
      {
        __isset.CreatedBy = true;
        this._CreatedBy = value;
      }
    }

    public int CreatedCustomerId
    {
      get
      {
        return _CreatedCustomerId;
      }
      set
      {
        __isset.CreatedCustomerId = true;
        this._CreatedCustomerId = value;
      }
    }

    public string ModifiedOn
    {
      get
      {
        return _ModifiedOn;
      }
      set
      {
        __isset.ModifiedOn = true;
        this._ModifiedOn = value;
      }
    }

    public string ModifiedBy
    {
      get
      {
        return _ModifiedBy;
      }
      set
      {
        __isset.ModifiedBy = true;
        this._ModifiedBy = value;
      }
    }

    public int ModifiedCustomerId
    {
      get
      {
        return _ModifiedCustomerId;
      }
      set
      {
        __isset.ModifiedCustomerId = true;
        this._ModifiedCustomerId = value;
      }
    }

    public string ApprovalPriceRemark
    {
      get
      {
        return _ApprovalPriceRemark;
      }
      set
      {
        __isset.ApprovalPriceRemark = true;
        this._ApprovalPriceRemark = value;
      }
    }

    public int ExemptionState
    {
      get
      {
        return _ExemptionState;
      }
      set
      {
        __isset.ExemptionState = true;
        this._ExemptionState = value;
      }
    }

    public int OwnerId
    {
      get
      {
        return _OwnerId;
      }
      set
      {
        __isset.OwnerId = true;
        this._OwnerId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Id;
      public bool SupplierID;
      public bool ColorID;
      public bool ItemCategoryId1;
      public bool ItemCategoryId2;
      public bool ItemCategoryId3;
      public bool FirstYear;
      public bool FirstSeason;
      public bool DevMonth;
      public bool Developer;
      public bool ItemCode;
      public bool ItemCode2;
      public bool ColorCode;
      public bool ItemName;
      public bool ItemSpec;
      public bool BuyerId;
      public bool Buyer;
      public bool Price;
      public bool DevPrice;
      public bool ExclusiveTaxPrice;
      public bool DevExclusiveTaxPrice;
      public bool ExclusiveTaxPriceAgent;
      public bool PriceAgent;
      public bool KGPrice;
      public bool Unit;
      public bool Component;
      public bool LateralContraction;
      public bool DirectContraction;
      public bool ItemWidth;
      public bool Weight;
      public bool KilogramMeter;
      public bool DaysSupply;
      public bool MOQ;
      public bool UpperInventory;
      public bool BelowInventory;
      public bool SupplierItemCode;
      public bool SupplierItemColor;
      public bool Remark;
      public bool PicturePath;
      public bool HaveApproveDevPrice;
      public bool HaveApprovePrice;
      public bool Brand;
      public bool DevType;
      public bool SortCode;
      public bool Enabled;
      public bool Deleted;
      public bool AccountID;
      public bool CreatedOn;
      public bool CreatedBy;
      public bool CreatedCustomerId;
      public bool ModifiedOn;
      public bool ModifiedBy;
      public bool ModifiedCustomerId;
      public bool ApprovalPriceRemark;
      public bool ExemptionState;
      public bool OwnerId;
    }

    public StockItem()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                SupplierID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                ColorID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ItemCategoryId1 = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                ItemCategoryId2 = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                ItemCategoryId3 = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                FirstYear = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                FirstSeason = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                DevMonth = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                Developer = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                ItemCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                ItemCode2 = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.String)
              {
                ColorCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                ItemName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.String)
              {
                ItemSpec = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.I32)
              {
                BuyerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.I32)
              {
                Buyer = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.Double)
              {
                Price = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.Double)
              {
                DevPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.Double)
              {
                ExclusiveTaxPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.Double)
              {
                DevExclusiveTaxPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.Double)
              {
                ExclusiveTaxPriceAgent = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.Double)
              {
                PriceAgent = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.Double)
              {
                KGPrice = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 25:
              if (field.Type == TType.String)
              {
                Unit = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 26:
              if (field.Type == TType.String)
              {
                Component = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 27:
              if (field.Type == TType.Double)
              {
                LateralContraction = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 28:
              if (field.Type == TType.Double)
              {
                DirectContraction = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 29:
              if (field.Type == TType.Double)
              {
                ItemWidth = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 30:
              if (field.Type == TType.Double)
              {
                Weight = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 31:
              if (field.Type == TType.Double)
              {
                KilogramMeter = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 32:
              if (field.Type == TType.String)
              {
                DaysSupply = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 33:
              if (field.Type == TType.Double)
              {
                MOQ = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 34:
              if (field.Type == TType.Double)
              {
                UpperInventory = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 35:
              if (field.Type == TType.Double)
              {
                BelowInventory = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 36:
              if (field.Type == TType.String)
              {
                SupplierItemCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 37:
              if (field.Type == TType.String)
              {
                SupplierItemColor = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 38:
              if (field.Type == TType.String)
              {
                Remark = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 39:
              if (field.Type == TType.String)
              {
                PicturePath = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 40:
              if (field.Type == TType.Bool)
              {
                HaveApproveDevPrice = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 41:
              if (field.Type == TType.Bool)
              {
                HaveApprovePrice = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 42:
              if (field.Type == TType.String)
              {
                Brand = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 43:
              if (field.Type == TType.String)
              {
                DevType = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 44:
              if (field.Type == TType.I32)
              {
                SortCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 45:
              if (field.Type == TType.Bool)
              {
                Enabled = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 46:
              if (field.Type == TType.Bool)
              {
                Deleted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 47:
              if (field.Type == TType.I32)
              {
                AccountID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 48:
              if (field.Type == TType.String)
              {
                CreatedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 49:
              if (field.Type == TType.String)
              {
                CreatedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 50:
              if (field.Type == TType.I32)
              {
                CreatedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 51:
              if (field.Type == TType.String)
              {
                ModifiedOn = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 52:
              if (field.Type == TType.String)
              {
                ModifiedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 53:
              if (field.Type == TType.I32)
              {
                ModifiedCustomerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 54:
              if (field.Type == TType.String)
              {
                ApprovalPriceRemark = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 55:
              if (field.Type == TType.I32)
              {
                ExemptionState = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 56:
              if (field.Type == TType.I32)
              {
                OwnerId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("StockItem");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.Id)
        {
          field.Name = "Id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.SupplierID)
        {
          field.Name = "SupplierID";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(SupplierID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ColorID)
        {
          field.Name = "ColorID";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ColorID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ItemCategoryId1)
        {
          field.Name = "ItemCategoryId1";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ItemCategoryId1, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ItemCategoryId2)
        {
          field.Name = "ItemCategoryId2";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ItemCategoryId2, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ItemCategoryId3)
        {
          field.Name = "ItemCategoryId3";
          field.Type = TType.I32;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ItemCategoryId3, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (FirstYear != null && __isset.FirstYear)
        {
          field.Name = "FirstYear";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FirstYear, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (FirstSeason != null && __isset.FirstSeason)
        {
          field.Name = "FirstSeason";
          field.Type = TType.String;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FirstSeason, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DevMonth != null && __isset.DevMonth)
        {
          field.Name = "DevMonth";
          field.Type = TType.String;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DevMonth, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Developer != null && __isset.Developer)
        {
          field.Name = "Developer";
          field.Type = TType.String;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Developer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ItemCode != null && __isset.ItemCode)
        {
          field.Name = "ItemCode";
          field.Type = TType.String;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ItemCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ItemCode2 != null && __isset.ItemCode2)
        {
          field.Name = "ItemCode2";
          field.Type = TType.String;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ItemCode2, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ColorCode != null && __isset.ColorCode)
        {
          field.Name = "ColorCode";
          field.Type = TType.String;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ColorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ItemName != null && __isset.ItemName)
        {
          field.Name = "ItemName";
          field.Type = TType.String;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ItemName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ItemSpec != null && __isset.ItemSpec)
        {
          field.Name = "ItemSpec";
          field.Type = TType.String;
          field.ID = 15;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ItemSpec, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.BuyerId)
        {
          field.Name = "BuyerId";
          field.Type = TType.I32;
          field.ID = 16;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(BuyerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Buyer)
        {
          field.Name = "Buyer";
          field.Type = TType.I32;
          field.ID = 17;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Buyer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Price)
        {
          field.Name = "Price";
          field.Type = TType.Double;
          field.ID = 18;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Price, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DevPrice)
        {
          field.Name = "DevPrice";
          field.Type = TType.Double;
          field.ID = 19;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(DevPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ExclusiveTaxPrice)
        {
          field.Name = "ExclusiveTaxPrice";
          field.Type = TType.Double;
          field.ID = 20;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ExclusiveTaxPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DevExclusiveTaxPrice)
        {
          field.Name = "DevExclusiveTaxPrice";
          field.Type = TType.Double;
          field.ID = 21;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(DevExclusiveTaxPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ExclusiveTaxPriceAgent)
        {
          field.Name = "ExclusiveTaxPriceAgent";
          field.Type = TType.Double;
          field.ID = 22;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ExclusiveTaxPriceAgent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.PriceAgent)
        {
          field.Name = "PriceAgent";
          field.Type = TType.Double;
          field.ID = 23;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(PriceAgent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.KGPrice)
        {
          field.Name = "KGPrice";
          field.Type = TType.Double;
          field.ID = 24;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(KGPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Unit != null && __isset.Unit)
        {
          field.Name = "Unit";
          field.Type = TType.String;
          field.ID = 25;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Unit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Component != null && __isset.Component)
        {
          field.Name = "Component";
          field.Type = TType.String;
          field.ID = 26;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Component, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.LateralContraction)
        {
          field.Name = "LateralContraction";
          field.Type = TType.Double;
          field.ID = 27;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(LateralContraction, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DirectContraction)
        {
          field.Name = "DirectContraction";
          field.Type = TType.Double;
          field.ID = 28;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(DirectContraction, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ItemWidth)
        {
          field.Name = "ItemWidth";
          field.Type = TType.Double;
          field.ID = 29;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ItemWidth, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Weight)
        {
          field.Name = "Weight";
          field.Type = TType.Double;
          field.ID = 30;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Weight, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.KilogramMeter)
        {
          field.Name = "KilogramMeter";
          field.Type = TType.Double;
          field.ID = 31;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(KilogramMeter, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DaysSupply != null && __isset.DaysSupply)
        {
          field.Name = "DaysSupply";
          field.Type = TType.String;
          field.ID = 32;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DaysSupply, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.MOQ)
        {
          field.Name = "MOQ";
          field.Type = TType.Double;
          field.ID = 33;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(MOQ, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.UpperInventory)
        {
          field.Name = "UpperInventory";
          field.Type = TType.Double;
          field.ID = 34;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(UpperInventory, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.BelowInventory)
        {
          field.Name = "BelowInventory";
          field.Type = TType.Double;
          field.ID = 35;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(BelowInventory, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SupplierItemCode != null && __isset.SupplierItemCode)
        {
          field.Name = "SupplierItemCode";
          field.Type = TType.String;
          field.ID = 36;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SupplierItemCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SupplierItemColor != null && __isset.SupplierItemColor)
        {
          field.Name = "SupplierItemColor";
          field.Type = TType.String;
          field.ID = 37;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SupplierItemColor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Remark != null && __isset.Remark)
        {
          field.Name = "Remark";
          field.Type = TType.String;
          field.ID = 38;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Remark, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PicturePath != null && __isset.PicturePath)
        {
          field.Name = "PicturePath";
          field.Type = TType.String;
          field.ID = 39;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(PicturePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.HaveApproveDevPrice)
        {
          field.Name = "HaveApproveDevPrice";
          field.Type = TType.Bool;
          field.ID = 40;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(HaveApproveDevPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.HaveApprovePrice)
        {
          field.Name = "HaveApprovePrice";
          field.Type = TType.Bool;
          field.ID = 41;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(HaveApprovePrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Brand != null && __isset.Brand)
        {
          field.Name = "Brand";
          field.Type = TType.String;
          field.ID = 42;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Brand, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DevType != null && __isset.DevType)
        {
          field.Name = "DevType";
          field.Type = TType.String;
          field.ID = 43;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DevType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.SortCode)
        {
          field.Name = "SortCode";
          field.Type = TType.I32;
          field.ID = 44;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(SortCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Enabled)
        {
          field.Name = "Enabled";
          field.Type = TType.Bool;
          field.ID = 45;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Enabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Deleted)
        {
          field.Name = "Deleted";
          field.Type = TType.Bool;
          field.ID = 46;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Deleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.AccountID)
        {
          field.Name = "AccountID";
          field.Type = TType.I32;
          field.ID = 47;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(AccountID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedOn != null && __isset.CreatedOn)
        {
          field.Name = "CreatedOn";
          field.Type = TType.String;
          field.ID = 48;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CreatedBy != null && __isset.CreatedBy)
        {
          field.Name = "CreatedBy";
          field.Type = TType.String;
          field.ID = 49;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CreatedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.CreatedCustomerId)
        {
          field.Name = "CreatedCustomerId";
          field.Type = TType.I32;
          field.ID = 50;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(CreatedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedOn != null && __isset.ModifiedOn)
        {
          field.Name = "ModifiedOn";
          field.Type = TType.String;
          field.ID = 51;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedOn, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ModifiedBy != null && __isset.ModifiedBy)
        {
          field.Name = "ModifiedBy";
          field.Type = TType.String;
          field.ID = 52;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ModifiedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ModifiedCustomerId)
        {
          field.Name = "ModifiedCustomerId";
          field.Type = TType.I32;
          field.ID = 53;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ModifiedCustomerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ApprovalPriceRemark != null && __isset.ApprovalPriceRemark)
        {
          field.Name = "ApprovalPriceRemark";
          field.Type = TType.String;
          field.ID = 54;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ApprovalPriceRemark, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.ExemptionState)
        {
          field.Name = "ExemptionState";
          field.Type = TType.I32;
          field.ID = 55;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ExemptionState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.OwnerId)
        {
          field.Name = "OwnerId";
          field.Type = TType.I32;
          field.ID = 56;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(OwnerId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("StockItem(");
      bool __first = true;
      if (__isset.Id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.SupplierID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SupplierID: ");
        sb.Append(SupplierID);
      }
      if (__isset.ColorID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ColorID: ");
        sb.Append(ColorID);
      }
      if (__isset.ItemCategoryId1)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemCategoryId1: ");
        sb.Append(ItemCategoryId1);
      }
      if (__isset.ItemCategoryId2)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemCategoryId2: ");
        sb.Append(ItemCategoryId2);
      }
      if (__isset.ItemCategoryId3)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemCategoryId3: ");
        sb.Append(ItemCategoryId3);
      }
      if (FirstYear != null && __isset.FirstYear)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FirstYear: ");
        sb.Append(FirstYear);
      }
      if (FirstSeason != null && __isset.FirstSeason)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FirstSeason: ");
        sb.Append(FirstSeason);
      }
      if (DevMonth != null && __isset.DevMonth)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DevMonth: ");
        sb.Append(DevMonth);
      }
      if (Developer != null && __isset.Developer)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Developer: ");
        sb.Append(Developer);
      }
      if (ItemCode != null && __isset.ItemCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemCode: ");
        sb.Append(ItemCode);
      }
      if (ItemCode2 != null && __isset.ItemCode2)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemCode2: ");
        sb.Append(ItemCode2);
      }
      if (ColorCode != null && __isset.ColorCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ColorCode: ");
        sb.Append(ColorCode);
      }
      if (ItemName != null && __isset.ItemName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemName: ");
        sb.Append(ItemName);
      }
      if (ItemSpec != null && __isset.ItemSpec)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemSpec: ");
        sb.Append(ItemSpec);
      }
      if (__isset.BuyerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuyerId: ");
        sb.Append(BuyerId);
      }
      if (__isset.Buyer)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Buyer: ");
        sb.Append(Buyer);
      }
      if (__isset.Price)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Price: ");
        sb.Append(Price);
      }
      if (__isset.DevPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DevPrice: ");
        sb.Append(DevPrice);
      }
      if (__isset.ExclusiveTaxPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ExclusiveTaxPrice: ");
        sb.Append(ExclusiveTaxPrice);
      }
      if (__isset.DevExclusiveTaxPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DevExclusiveTaxPrice: ");
        sb.Append(DevExclusiveTaxPrice);
      }
      if (__isset.ExclusiveTaxPriceAgent)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ExclusiveTaxPriceAgent: ");
        sb.Append(ExclusiveTaxPriceAgent);
      }
      if (__isset.PriceAgent)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PriceAgent: ");
        sb.Append(PriceAgent);
      }
      if (__isset.KGPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("KGPrice: ");
        sb.Append(KGPrice);
      }
      if (Unit != null && __isset.Unit)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Unit: ");
        sb.Append(Unit);
      }
      if (Component != null && __isset.Component)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Component: ");
        sb.Append(Component);
      }
      if (__isset.LateralContraction)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LateralContraction: ");
        sb.Append(LateralContraction);
      }
      if (__isset.DirectContraction)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DirectContraction: ");
        sb.Append(DirectContraction);
      }
      if (__isset.ItemWidth)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemWidth: ");
        sb.Append(ItemWidth);
      }
      if (__isset.Weight)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Weight: ");
        sb.Append(Weight);
      }
      if (__isset.KilogramMeter)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("KilogramMeter: ");
        sb.Append(KilogramMeter);
      }
      if (DaysSupply != null && __isset.DaysSupply)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DaysSupply: ");
        sb.Append(DaysSupply);
      }
      if (__isset.MOQ)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MOQ: ");
        sb.Append(MOQ);
      }
      if (__isset.UpperInventory)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UpperInventory: ");
        sb.Append(UpperInventory);
      }
      if (__isset.BelowInventory)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BelowInventory: ");
        sb.Append(BelowInventory);
      }
      if (SupplierItemCode != null && __isset.SupplierItemCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SupplierItemCode: ");
        sb.Append(SupplierItemCode);
      }
      if (SupplierItemColor != null && __isset.SupplierItemColor)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SupplierItemColor: ");
        sb.Append(SupplierItemColor);
      }
      if (Remark != null && __isset.Remark)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Remark: ");
        sb.Append(Remark);
      }
      if (PicturePath != null && __isset.PicturePath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PicturePath: ");
        sb.Append(PicturePath);
      }
      if (__isset.HaveApproveDevPrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("HaveApproveDevPrice: ");
        sb.Append(HaveApproveDevPrice);
      }
      if (__isset.HaveApprovePrice)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("HaveApprovePrice: ");
        sb.Append(HaveApprovePrice);
      }
      if (Brand != null && __isset.Brand)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Brand: ");
        sb.Append(Brand);
      }
      if (DevType != null && __isset.DevType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DevType: ");
        sb.Append(DevType);
      }
      if (__isset.SortCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SortCode: ");
        sb.Append(SortCode);
      }
      if (__isset.Enabled)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Enabled: ");
        sb.Append(Enabled);
      }
      if (__isset.Deleted)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Deleted: ");
        sb.Append(Deleted);
      }
      if (__isset.AccountID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AccountID: ");
        sb.Append(AccountID);
      }
      if (CreatedOn != null && __isset.CreatedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedOn: ");
        sb.Append(CreatedOn);
      }
      if (CreatedBy != null && __isset.CreatedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedBy: ");
        sb.Append(CreatedBy);
      }
      if (__isset.CreatedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CreatedCustomerId: ");
        sb.Append(CreatedCustomerId);
      }
      if (ModifiedOn != null && __isset.ModifiedOn)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedOn: ");
        sb.Append(ModifiedOn);
      }
      if (ModifiedBy != null && __isset.ModifiedBy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedBy: ");
        sb.Append(ModifiedBy);
      }
      if (__isset.ModifiedCustomerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ModifiedCustomerId: ");
        sb.Append(ModifiedCustomerId);
      }
      if (ApprovalPriceRemark != null && __isset.ApprovalPriceRemark)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ApprovalPriceRemark: ");
        sb.Append(ApprovalPriceRemark);
      }
      if (__isset.ExemptionState)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ExemptionState: ");
        sb.Append(ExemptionState);
      }
      if (__isset.OwnerId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OwnerId: ");
        sb.Append(OwnerId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
