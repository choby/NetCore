/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Inman.Platform.ServiceStub.Thrift
{

  public partial class ProductList : TBase
  {
    private int _Total;
    private THashSet<Inman.Platform.ServiceStub.Thrift.Data.Product> _Products;
    private string _ExecuteTime;

    public int Total
    {
      get
      {
        return _Total;
      }
      set
      {
        __isset.Total = true;
        this._Total = value;
      }
    }

    public THashSet<Inman.Platform.ServiceStub.Thrift.Data.Product> Products
    {
      get
      {
        return _Products;
      }
      set
      {
        __isset.Products = true;
        this._Products = value;
      }
    }

    public string ExecuteTime
    {
      get
      {
        return _ExecuteTime;
      }
      set
      {
        __isset.ExecuteTime = true;
        this._ExecuteTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Total;
      public bool Products;
      public bool ExecuteTime;
    }

    public ProductList()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Total = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Set)
              {
                {
                  Products = new THashSet<Inman.Platform.ServiceStub.Thrift.Data.Product>();
                  TSet _set4 = await iprot.ReadSetBeginAsync(cancellationToken);
                  for(int _i5 = 0; _i5 < _set4.Count; ++_i5)
                  {
                    Inman.Platform.ServiceStub.Thrift.Data.Product _elem6;
                    _elem6 = new Inman.Platform.ServiceStub.Thrift.Data.Product();
                    await _elem6.ReadAsync(iprot, cancellationToken);
                    Products.Add(_elem6);
                  }
                  await iprot.ReadSetEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ExecuteTime = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ProductList");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.Total)
        {
          field.Name = "Total";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Total, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Products != null && __isset.Products)
        {
          field.Name = "Products";
          field.Type = TType.Set;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteSetBeginAsync(new TSet(TType.Struct, Products.Count), cancellationToken);
            foreach (Inman.Platform.ServiceStub.Thrift.Data.Product _iter7 in Products)
            {
              await _iter7.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteSetEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ExecuteTime != null && __isset.ExecuteTime)
        {
          field.Name = "ExecuteTime";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ExecuteTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ProductList(");
      bool __first = true;
      if (__isset.Total)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Total: ");
        sb.Append(Total);
      }
      if (Products != null && __isset.Products)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Products: ");
        sb.Append(Products);
      }
      if (ExecuteTime != null && __isset.ExecuteTime)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ExecuteTime: ");
        sb.Append(ExecuteTime);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
