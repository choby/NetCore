// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Inman.Platform.ServiceStub.Data {

  /// <summary>Holder for reflection information generated from data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpkYXRhLnByb3RvIjQKBFVzZXISCgoCSWQYASABKAUSDgoGT3BlbklkGAIg",
            "ASgJEhAKCFVzZXJOYW1lGAMgASgJIpUJCglTdG9ja0l0ZW0SCgoCSWQYASAB",
            "KAUSEgoKU3VwcGxpZXJJRBgCIAEoBRIPCgdDb2xvcklEGAMgASgFEhcKD0l0",
            "ZW1DYXRlZ29yeUlkMRgEIAEoBRIXCg9JdGVtQ2F0ZWdvcnlJZDIYBSABKAUS",
            "FwoPSXRlbUNhdGVnb3J5SWQzGAYgASgFEhEKCUZpcnN0WWVhchgHIAEoCRIT",
            "CgtGaXJzdFNlYXNvbhgIIAEoCRIQCghEZXZNb250aBgJIAEoCRIRCglEZXZl",
            "bG9wZXIYCiABKAkSEAoISXRlbUNvZGUYCyABKAkSEQoJSXRlbUNvZGUyGAwg",
            "ASgJEhEKCUNvbG9yQ29kZRgNIAEoCRIQCghJdGVtTmFtZRgOIAEoCRIQCghJ",
            "dGVtU3BlYxgPIAEoCRIPCgdCdXllcklkGBAgASgFEg0KBUJ1eWVyGBEgASgF",
            "Eg0KBVByaWNlGBIgASgBEhAKCERldlByaWNlGBMgASgBEhkKEUV4Y2x1c2l2",
            "ZVRheFByaWNlGBQgASgBEhwKFERldkV4Y2x1c2l2ZVRheFByaWNlGBUgASgB",
            "Eh4KFkV4Y2x1c2l2ZVRheFByaWNlQWdlbnQYFiABKAESEgoKUHJpY2VBZ2Vu",
            "dBgXIAEoARIPCgdLR1ByaWNlGBggASgBEgwKBFVuaXQYGSABKAkSEQoJQ29t",
            "cG9uZW50GBogASgJEhoKEkxhdGVyYWxDb250cmFjdGlvbhgbIAEoAhIZChFE",
            "aXJlY3RDb250cmFjdGlvbhgcIAEoAhIRCglJdGVtV2lkdGgYHSABKAISDgoG",
            "V2VpZ2h0GB4gASgCEhUKDUtpbG9ncmFtTWV0ZXIYHyABKAISEgoKRGF5c1N1",
            "cHBseRggIAEoCRILCgNNT1EYISABKAISFgoOVXBwZXJJbnZlbnRvcnkYIiAB",
            "KAISFgoOQmVsb3dJbnZlbnRvcnkYIyABKAISGAoQU3VwcGxpZXJJdGVtQ29k",
            "ZRgkIAEoCRIZChFTdXBwbGllckl0ZW1Db2xvchglIAEoCRIOCgZSZW1hcmsY",
            "JiABKAkSEwoLUGljdHVyZVBhdGgYJyABKAkSGwoTSGF2ZUFwcHJvdmVEZXZQ",
            "cmljZRgoIAEoCBIYChBIYXZlQXBwcm92ZVByaWNlGCkgASgIEg0KBUJyYW5k",
            "GCogASgJEg8KB0RldlR5cGUYKyABKAkSEAoIU29ydENvZGUYLCABKAUSDwoH",
            "RW5hYmxlZBgtIAEoCBIPCgdEZWxldGVkGC4gASgIEhEKCUFjY291bnRJRBgv",
            "IAEoBRIRCglDcmVhdGVkT24YMCABKAESEQoJQ3JlYXRlZEJ5GDEgASgJEhkK",
            "EUNyZWF0ZWRDdXN0b21lcklkGDIgASgFEhIKCk1vZGlmaWVkT24YMyABKAES",
            "EgoKTW9kaWZpZWRCeRg0IAEoCRIaChJNb2RpZmllZEN1c3RvbWVySWQYNSAB",
            "KAUSGwoTQXBwcm92YWxQcmljZVJlbWFyaxg2IAEoCRIWCg5FeGVtcHRpb25T",
            "dGF0ZRg3IAEoBRIPCgdPd25lcklkGDggASgFIoYBCgdQcm9kdWN0EgoKAklk",
            "GAEgASgFEg8KB0NvbG9ySWQYAiABKAUSDwoHR29vZHNJZBgDIAEoBRIRCglQ",
            "cm9kdWN0U04YBCABKAkSEwoLUGljdHVyZVBhdGgYBSABKAkSDgoGUmVtYXJr",
            "GAYgASgJEhUKBUdvb2RzGAcgASgLMgYuR29vZHMitgIKBUdvb2RzEgoKAklk",
            "GAEgASgFEhAKCERlc2lnbklEGAIgASgFEhgKEFByb2R1Y3RDYXRlZ29yeTEY",
            "AyABKAkSGAoQUHJvZHVjdENhdGVnb3J5MhgEIAEoCRIYChBQcm9kdWN0Q2F0",
            "ZWdvcnkzGAUgASgJEg0KBUJyYW5kGAYgASgJEhMKC1Byb2R1Y3ROYW1lGAcg",
            "ASgJEhMKC1Byb2R1Y3RZZWFyGAggASgFEg4KBlNlYXNvbhgJIAEoCRIUCgxF",
            "eGVjU3RhbmRhcmQYCiABKAkSEgoKU2FmZXR5Q2FzcxgLIAEoCRIRCglDb21w",
            "b25lbnQYDCABKAkSDwoHRGV2Q29zdBgNIAEoARIRCglQcm9kdWN0U04YDiAB",
            "KAkSFwoGRGVzaWduGA8gASgLMgcuRGVzaWduIpABCgZEZXNpZ24SCgoCSWQY",
            "ASABKAUSDwoHRGV2WWVhchgCIAEoBRITCgtEZXNpZ25Hcm91cBgDIAEoCRIU",
            "CgxEZXNpZ25TZWFzb24YBCABKAkSDQoFVGhlbWUYBSABKAkSEgoKQ29sbGVj",
            "dGlvbhgGIAEoCRIbChNEZXNpZ25Bc3Npc3RhbnROYW1lGAcgASgJQiKqAh9J",
            "bm1hbi5QbGF0Zm9ybS5TZXJ2aWNlU3R1Yi5EYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Inman.Platform.ServiceStub.Data.User), global::Inman.Platform.ServiceStub.Data.User.Parser, new[]{ "Id", "OpenId", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Inman.Platform.ServiceStub.Data.StockItem), global::Inman.Platform.ServiceStub.Data.StockItem.Parser, new[]{ "Id", "SupplierID", "ColorID", "ItemCategoryId1", "ItemCategoryId2", "ItemCategoryId3", "FirstYear", "FirstSeason", "DevMonth", "Developer", "ItemCode", "ItemCode2", "ColorCode", "ItemName", "ItemSpec", "BuyerId", "Buyer", "Price", "DevPrice", "ExclusiveTaxPrice", "DevExclusiveTaxPrice", "ExclusiveTaxPriceAgent", "PriceAgent", "KGPrice", "Unit", "Component", "LateralContraction", "DirectContraction", "ItemWidth", "Weight", "KilogramMeter", "DaysSupply", "MOQ", "UpperInventory", "BelowInventory", "SupplierItemCode", "SupplierItemColor", "Remark", "PicturePath", "HaveApproveDevPrice", "HaveApprovePrice", "Brand", "DevType", "SortCode", "Enabled", "Deleted", "AccountID", "CreatedOn", "CreatedBy", "CreatedCustomerId", "ModifiedOn", "ModifiedBy", "ModifiedCustomerId", "ApprovalPriceRemark", "ExemptionState", "OwnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Inman.Platform.ServiceStub.Data.Product), global::Inman.Platform.ServiceStub.Data.Product.Parser, new[]{ "Id", "ColorId", "GoodsId", "ProductSN", "PicturePath", "Remark", "Goods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Inman.Platform.ServiceStub.Data.Goods), global::Inman.Platform.ServiceStub.Data.Goods.Parser, new[]{ "Id", "DesignID", "ProductCategory1", "ProductCategory2", "ProductCategory3", "Brand", "ProductName", "ProductYear", "Season", "ExecStandard", "SafetyCass", "Component", "DevCost", "ProductSN", "Design" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Inman.Platform.ServiceStub.Data.Design), global::Inman.Platform.ServiceStub.Data.Design.Parser, new[]{ "Id", "DevYear", "DesignGroup", "DesignSeason", "Theme", "Collection", "DesignAssistantName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Inman.Platform.ServiceStub.Data.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      openId_ = other.openId_;
      userName_ = other.userName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "OpenId" field.</summary>
    public const int OpenIdFieldNumber = 2;
    private string openId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OpenId != other.OpenId) return false;
      if (UserName != other.UserName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpenId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            OpenId = input.ReadString();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StockItem : pb::IMessage<StockItem> {
    private static readonly pb::MessageParser<StockItem> _parser = new pb::MessageParser<StockItem>(() => new StockItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StockItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Inman.Platform.ServiceStub.Data.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockItem(StockItem other) : this() {
      id_ = other.id_;
      supplierID_ = other.supplierID_;
      colorID_ = other.colorID_;
      itemCategoryId1_ = other.itemCategoryId1_;
      itemCategoryId2_ = other.itemCategoryId2_;
      itemCategoryId3_ = other.itemCategoryId3_;
      firstYear_ = other.firstYear_;
      firstSeason_ = other.firstSeason_;
      devMonth_ = other.devMonth_;
      developer_ = other.developer_;
      itemCode_ = other.itemCode_;
      itemCode2_ = other.itemCode2_;
      colorCode_ = other.colorCode_;
      itemName_ = other.itemName_;
      itemSpec_ = other.itemSpec_;
      buyerId_ = other.buyerId_;
      buyer_ = other.buyer_;
      price_ = other.price_;
      devPrice_ = other.devPrice_;
      exclusiveTaxPrice_ = other.exclusiveTaxPrice_;
      devExclusiveTaxPrice_ = other.devExclusiveTaxPrice_;
      exclusiveTaxPriceAgent_ = other.exclusiveTaxPriceAgent_;
      priceAgent_ = other.priceAgent_;
      kGPrice_ = other.kGPrice_;
      unit_ = other.unit_;
      component_ = other.component_;
      lateralContraction_ = other.lateralContraction_;
      directContraction_ = other.directContraction_;
      itemWidth_ = other.itemWidth_;
      weight_ = other.weight_;
      kilogramMeter_ = other.kilogramMeter_;
      daysSupply_ = other.daysSupply_;
      mOQ_ = other.mOQ_;
      upperInventory_ = other.upperInventory_;
      belowInventory_ = other.belowInventory_;
      supplierItemCode_ = other.supplierItemCode_;
      supplierItemColor_ = other.supplierItemColor_;
      remark_ = other.remark_;
      picturePath_ = other.picturePath_;
      haveApproveDevPrice_ = other.haveApproveDevPrice_;
      haveApprovePrice_ = other.haveApprovePrice_;
      brand_ = other.brand_;
      devType_ = other.devType_;
      sortCode_ = other.sortCode_;
      enabled_ = other.enabled_;
      deleted_ = other.deleted_;
      accountID_ = other.accountID_;
      createdOn_ = other.createdOn_;
      createdBy_ = other.createdBy_;
      createdCustomerId_ = other.createdCustomerId_;
      modifiedOn_ = other.modifiedOn_;
      modifiedBy_ = other.modifiedBy_;
      modifiedCustomerId_ = other.modifiedCustomerId_;
      approvalPriceRemark_ = other.approvalPriceRemark_;
      exemptionState_ = other.exemptionState_;
      ownerId_ = other.ownerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockItem Clone() {
      return new StockItem(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "SupplierID" field.</summary>
    public const int SupplierIDFieldNumber = 2;
    private int supplierID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupplierID {
      get { return supplierID_; }
      set {
        supplierID_ = value;
      }
    }

    /// <summary>Field number for the "ColorID" field.</summary>
    public const int ColorIDFieldNumber = 3;
    private int colorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorID {
      get { return colorID_; }
      set {
        colorID_ = value;
      }
    }

    /// <summary>Field number for the "ItemCategoryId1" field.</summary>
    public const int ItemCategoryId1FieldNumber = 4;
    private int itemCategoryId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCategoryId1 {
      get { return itemCategoryId1_; }
      set {
        itemCategoryId1_ = value;
      }
    }

    /// <summary>Field number for the "ItemCategoryId2" field.</summary>
    public const int ItemCategoryId2FieldNumber = 5;
    private int itemCategoryId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCategoryId2 {
      get { return itemCategoryId2_; }
      set {
        itemCategoryId2_ = value;
      }
    }

    /// <summary>Field number for the "ItemCategoryId3" field.</summary>
    public const int ItemCategoryId3FieldNumber = 6;
    private int itemCategoryId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCategoryId3 {
      get { return itemCategoryId3_; }
      set {
        itemCategoryId3_ = value;
      }
    }

    /// <summary>Field number for the "FirstYear" field.</summary>
    public const int FirstYearFieldNumber = 7;
    private string firstYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstYear {
      get { return firstYear_; }
      set {
        firstYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FirstSeason" field.</summary>
    public const int FirstSeasonFieldNumber = 8;
    private string firstSeason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstSeason {
      get { return firstSeason_; }
      set {
        firstSeason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DevMonth" field.</summary>
    public const int DevMonthFieldNumber = 9;
    private string devMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DevMonth {
      get { return devMonth_; }
      set {
        devMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Developer" field.</summary>
    public const int DeveloperFieldNumber = 10;
    private string developer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Developer {
      get { return developer_; }
      set {
        developer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemCode" field.</summary>
    public const int ItemCodeFieldNumber = 11;
    private string itemCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemCode {
      get { return itemCode_; }
      set {
        itemCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemCode2" field.</summary>
    public const int ItemCode2FieldNumber = 12;
    private string itemCode2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemCode2 {
      get { return itemCode2_; }
      set {
        itemCode2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ColorCode" field.</summary>
    public const int ColorCodeFieldNumber = 13;
    private string colorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColorCode {
      get { return colorCode_; }
      set {
        colorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemName" field.</summary>
    public const int ItemNameFieldNumber = 14;
    private string itemName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemName {
      get { return itemName_; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemSpec" field.</summary>
    public const int ItemSpecFieldNumber = 15;
    private string itemSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemSpec {
      get { return itemSpec_; }
      set {
        itemSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BuyerId" field.</summary>
    public const int BuyerIdFieldNumber = 16;
    private int buyerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyerId {
      get { return buyerId_; }
      set {
        buyerId_ = value;
      }
    }

    /// <summary>Field number for the "Buyer" field.</summary>
    public const int BuyerFieldNumber = 17;
    private int buyer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Buyer {
      get { return buyer_; }
      set {
        buyer_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 18;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "DevPrice" field.</summary>
    public const int DevPriceFieldNumber = 19;
    private double devPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DevPrice {
      get { return devPrice_; }
      set {
        devPrice_ = value;
      }
    }

    /// <summary>Field number for the "ExclusiveTaxPrice" field.</summary>
    public const int ExclusiveTaxPriceFieldNumber = 20;
    private double exclusiveTaxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExclusiveTaxPrice {
      get { return exclusiveTaxPrice_; }
      set {
        exclusiveTaxPrice_ = value;
      }
    }

    /// <summary>Field number for the "DevExclusiveTaxPrice" field.</summary>
    public const int DevExclusiveTaxPriceFieldNumber = 21;
    private double devExclusiveTaxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DevExclusiveTaxPrice {
      get { return devExclusiveTaxPrice_; }
      set {
        devExclusiveTaxPrice_ = value;
      }
    }

    /// <summary>Field number for the "ExclusiveTaxPriceAgent" field.</summary>
    public const int ExclusiveTaxPriceAgentFieldNumber = 22;
    private double exclusiveTaxPriceAgent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExclusiveTaxPriceAgent {
      get { return exclusiveTaxPriceAgent_; }
      set {
        exclusiveTaxPriceAgent_ = value;
      }
    }

    /// <summary>Field number for the "PriceAgent" field.</summary>
    public const int PriceAgentFieldNumber = 23;
    private double priceAgent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceAgent {
      get { return priceAgent_; }
      set {
        priceAgent_ = value;
      }
    }

    /// <summary>Field number for the "KGPrice" field.</summary>
    public const int KGPriceFieldNumber = 24;
    private double kGPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double KGPrice {
      get { return kGPrice_; }
      set {
        kGPrice_ = value;
      }
    }

    /// <summary>Field number for the "Unit" field.</summary>
    public const int UnitFieldNumber = 25;
    private string unit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Component" field.</summary>
    public const int ComponentFieldNumber = 26;
    private string component_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Component {
      get { return component_; }
      set {
        component_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LateralContraction" field.</summary>
    public const int LateralContractionFieldNumber = 27;
    private float lateralContraction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LateralContraction {
      get { return lateralContraction_; }
      set {
        lateralContraction_ = value;
      }
    }

    /// <summary>Field number for the "DirectContraction" field.</summary>
    public const int DirectContractionFieldNumber = 28;
    private float directContraction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectContraction {
      get { return directContraction_; }
      set {
        directContraction_ = value;
      }
    }

    /// <summary>Field number for the "ItemWidth" field.</summary>
    public const int ItemWidthFieldNumber = 29;
    private float itemWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ItemWidth {
      get { return itemWidth_; }
      set {
        itemWidth_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 30;
    private float weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "KilogramMeter" field.</summary>
    public const int KilogramMeterFieldNumber = 31;
    private float kilogramMeter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KilogramMeter {
      get { return kilogramMeter_; }
      set {
        kilogramMeter_ = value;
      }
    }

    /// <summary>Field number for the "DaysSupply" field.</summary>
    public const int DaysSupplyFieldNumber = 32;
    private string daysSupply_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DaysSupply {
      get { return daysSupply_; }
      set {
        daysSupply_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MOQ" field.</summary>
    public const int MOQFieldNumber = 33;
    private float mOQ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MOQ {
      get { return mOQ_; }
      set {
        mOQ_ = value;
      }
    }

    /// <summary>Field number for the "UpperInventory" field.</summary>
    public const int UpperInventoryFieldNumber = 34;
    private float upperInventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UpperInventory {
      get { return upperInventory_; }
      set {
        upperInventory_ = value;
      }
    }

    /// <summary>Field number for the "BelowInventory" field.</summary>
    public const int BelowInventoryFieldNumber = 35;
    private float belowInventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BelowInventory {
      get { return belowInventory_; }
      set {
        belowInventory_ = value;
      }
    }

    /// <summary>Field number for the "SupplierItemCode" field.</summary>
    public const int SupplierItemCodeFieldNumber = 36;
    private string supplierItemCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SupplierItemCode {
      get { return supplierItemCode_; }
      set {
        supplierItemCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SupplierItemColor" field.</summary>
    public const int SupplierItemColorFieldNumber = 37;
    private string supplierItemColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SupplierItemColor {
      get { return supplierItemColor_; }
      set {
        supplierItemColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Remark" field.</summary>
    public const int RemarkFieldNumber = 38;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PicturePath" field.</summary>
    public const int PicturePathFieldNumber = 39;
    private string picturePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PicturePath {
      get { return picturePath_; }
      set {
        picturePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HaveApproveDevPrice" field.</summary>
    public const int HaveApproveDevPriceFieldNumber = 40;
    private bool haveApproveDevPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HaveApproveDevPrice {
      get { return haveApproveDevPrice_; }
      set {
        haveApproveDevPrice_ = value;
      }
    }

    /// <summary>Field number for the "HaveApprovePrice" field.</summary>
    public const int HaveApprovePriceFieldNumber = 41;
    private bool haveApprovePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HaveApprovePrice {
      get { return haveApprovePrice_; }
      set {
        haveApprovePrice_ = value;
      }
    }

    /// <summary>Field number for the "Brand" field.</summary>
    public const int BrandFieldNumber = 42;
    private string brand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DevType" field.</summary>
    public const int DevTypeFieldNumber = 43;
    private string devType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DevType {
      get { return devType_; }
      set {
        devType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SortCode" field.</summary>
    public const int SortCodeFieldNumber = 44;
    private int sortCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SortCode {
      get { return sortCode_; }
      set {
        sortCode_ = value;
      }
    }

    /// <summary>Field number for the "Enabled" field.</summary>
    public const int EnabledFieldNumber = 45;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "Deleted" field.</summary>
    public const int DeletedFieldNumber = 46;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    /// <summary>Field number for the "AccountID" field.</summary>
    public const int AccountIDFieldNumber = 47;
    private int accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "CreatedOn" field.</summary>
    public const int CreatedOnFieldNumber = 48;
    private double createdOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = value;
      }
    }

    /// <summary>Field number for the "CreatedBy" field.</summary>
    public const int CreatedByFieldNumber = 49;
    private string createdBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedBy {
      get { return createdBy_; }
      set {
        createdBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedCustomerId" field.</summary>
    public const int CreatedCustomerIdFieldNumber = 50;
    private int createdCustomerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatedCustomerId {
      get { return createdCustomerId_; }
      set {
        createdCustomerId_ = value;
      }
    }

    /// <summary>Field number for the "ModifiedOn" field.</summary>
    public const int ModifiedOnFieldNumber = 51;
    private double modifiedOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ModifiedOn {
      get { return modifiedOn_; }
      set {
        modifiedOn_ = value;
      }
    }

    /// <summary>Field number for the "ModifiedBy" field.</summary>
    public const int ModifiedByFieldNumber = 52;
    private string modifiedBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModifiedBy {
      get { return modifiedBy_; }
      set {
        modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModifiedCustomerId" field.</summary>
    public const int ModifiedCustomerIdFieldNumber = 53;
    private int modifiedCustomerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifiedCustomerId {
      get { return modifiedCustomerId_; }
      set {
        modifiedCustomerId_ = value;
      }
    }

    /// <summary>Field number for the "ApprovalPriceRemark" field.</summary>
    public const int ApprovalPriceRemarkFieldNumber = 54;
    private string approvalPriceRemark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApprovalPriceRemark {
      get { return approvalPriceRemark_; }
      set {
        approvalPriceRemark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExemptionState" field.</summary>
    public const int ExemptionStateFieldNumber = 55;
    private int exemptionState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExemptionState {
      get { return exemptionState_; }
      set {
        exemptionState_ = value;
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 56;
    private int ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StockItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StockItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SupplierID != other.SupplierID) return false;
      if (ColorID != other.ColorID) return false;
      if (ItemCategoryId1 != other.ItemCategoryId1) return false;
      if (ItemCategoryId2 != other.ItemCategoryId2) return false;
      if (ItemCategoryId3 != other.ItemCategoryId3) return false;
      if (FirstYear != other.FirstYear) return false;
      if (FirstSeason != other.FirstSeason) return false;
      if (DevMonth != other.DevMonth) return false;
      if (Developer != other.Developer) return false;
      if (ItemCode != other.ItemCode) return false;
      if (ItemCode2 != other.ItemCode2) return false;
      if (ColorCode != other.ColorCode) return false;
      if (ItemName != other.ItemName) return false;
      if (ItemSpec != other.ItemSpec) return false;
      if (BuyerId != other.BuyerId) return false;
      if (Buyer != other.Buyer) return false;
      if (Price != other.Price) return false;
      if (DevPrice != other.DevPrice) return false;
      if (ExclusiveTaxPrice != other.ExclusiveTaxPrice) return false;
      if (DevExclusiveTaxPrice != other.DevExclusiveTaxPrice) return false;
      if (ExclusiveTaxPriceAgent != other.ExclusiveTaxPriceAgent) return false;
      if (PriceAgent != other.PriceAgent) return false;
      if (KGPrice != other.KGPrice) return false;
      if (Unit != other.Unit) return false;
      if (Component != other.Component) return false;
      if (LateralContraction != other.LateralContraction) return false;
      if (DirectContraction != other.DirectContraction) return false;
      if (ItemWidth != other.ItemWidth) return false;
      if (Weight != other.Weight) return false;
      if (KilogramMeter != other.KilogramMeter) return false;
      if (DaysSupply != other.DaysSupply) return false;
      if (MOQ != other.MOQ) return false;
      if (UpperInventory != other.UpperInventory) return false;
      if (BelowInventory != other.BelowInventory) return false;
      if (SupplierItemCode != other.SupplierItemCode) return false;
      if (SupplierItemColor != other.SupplierItemColor) return false;
      if (Remark != other.Remark) return false;
      if (PicturePath != other.PicturePath) return false;
      if (HaveApproveDevPrice != other.HaveApproveDevPrice) return false;
      if (HaveApprovePrice != other.HaveApprovePrice) return false;
      if (Brand != other.Brand) return false;
      if (DevType != other.DevType) return false;
      if (SortCode != other.SortCode) return false;
      if (Enabled != other.Enabled) return false;
      if (Deleted != other.Deleted) return false;
      if (AccountID != other.AccountID) return false;
      if (CreatedOn != other.CreatedOn) return false;
      if (CreatedBy != other.CreatedBy) return false;
      if (CreatedCustomerId != other.CreatedCustomerId) return false;
      if (ModifiedOn != other.ModifiedOn) return false;
      if (ModifiedBy != other.ModifiedBy) return false;
      if (ModifiedCustomerId != other.ModifiedCustomerId) return false;
      if (ApprovalPriceRemark != other.ApprovalPriceRemark) return false;
      if (ExemptionState != other.ExemptionState) return false;
      if (OwnerId != other.OwnerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SupplierID != 0) hash ^= SupplierID.GetHashCode();
      if (ColorID != 0) hash ^= ColorID.GetHashCode();
      if (ItemCategoryId1 != 0) hash ^= ItemCategoryId1.GetHashCode();
      if (ItemCategoryId2 != 0) hash ^= ItemCategoryId2.GetHashCode();
      if (ItemCategoryId3 != 0) hash ^= ItemCategoryId3.GetHashCode();
      if (FirstYear.Length != 0) hash ^= FirstYear.GetHashCode();
      if (FirstSeason.Length != 0) hash ^= FirstSeason.GetHashCode();
      if (DevMonth.Length != 0) hash ^= DevMonth.GetHashCode();
      if (Developer.Length != 0) hash ^= Developer.GetHashCode();
      if (ItemCode.Length != 0) hash ^= ItemCode.GetHashCode();
      if (ItemCode2.Length != 0) hash ^= ItemCode2.GetHashCode();
      if (ColorCode.Length != 0) hash ^= ColorCode.GetHashCode();
      if (ItemName.Length != 0) hash ^= ItemName.GetHashCode();
      if (ItemSpec.Length != 0) hash ^= ItemSpec.GetHashCode();
      if (BuyerId != 0) hash ^= BuyerId.GetHashCode();
      if (Buyer != 0) hash ^= Buyer.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (DevPrice != 0D) hash ^= DevPrice.GetHashCode();
      if (ExclusiveTaxPrice != 0D) hash ^= ExclusiveTaxPrice.GetHashCode();
      if (DevExclusiveTaxPrice != 0D) hash ^= DevExclusiveTaxPrice.GetHashCode();
      if (ExclusiveTaxPriceAgent != 0D) hash ^= ExclusiveTaxPriceAgent.GetHashCode();
      if (PriceAgent != 0D) hash ^= PriceAgent.GetHashCode();
      if (KGPrice != 0D) hash ^= KGPrice.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Component.Length != 0) hash ^= Component.GetHashCode();
      if (LateralContraction != 0F) hash ^= LateralContraction.GetHashCode();
      if (DirectContraction != 0F) hash ^= DirectContraction.GetHashCode();
      if (ItemWidth != 0F) hash ^= ItemWidth.GetHashCode();
      if (Weight != 0F) hash ^= Weight.GetHashCode();
      if (KilogramMeter != 0F) hash ^= KilogramMeter.GetHashCode();
      if (DaysSupply.Length != 0) hash ^= DaysSupply.GetHashCode();
      if (MOQ != 0F) hash ^= MOQ.GetHashCode();
      if (UpperInventory != 0F) hash ^= UpperInventory.GetHashCode();
      if (BelowInventory != 0F) hash ^= BelowInventory.GetHashCode();
      if (SupplierItemCode.Length != 0) hash ^= SupplierItemCode.GetHashCode();
      if (SupplierItemColor.Length != 0) hash ^= SupplierItemColor.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (PicturePath.Length != 0) hash ^= PicturePath.GetHashCode();
      if (HaveApproveDevPrice != false) hash ^= HaveApproveDevPrice.GetHashCode();
      if (HaveApprovePrice != false) hash ^= HaveApprovePrice.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (DevType.Length != 0) hash ^= DevType.GetHashCode();
      if (SortCode != 0) hash ^= SortCode.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      if (AccountID != 0) hash ^= AccountID.GetHashCode();
      if (CreatedOn != 0D) hash ^= CreatedOn.GetHashCode();
      if (CreatedBy.Length != 0) hash ^= CreatedBy.GetHashCode();
      if (CreatedCustomerId != 0) hash ^= CreatedCustomerId.GetHashCode();
      if (ModifiedOn != 0D) hash ^= ModifiedOn.GetHashCode();
      if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
      if (ModifiedCustomerId != 0) hash ^= ModifiedCustomerId.GetHashCode();
      if (ApprovalPriceRemark.Length != 0) hash ^= ApprovalPriceRemark.GetHashCode();
      if (ExemptionState != 0) hash ^= ExemptionState.GetHashCode();
      if (OwnerId != 0) hash ^= OwnerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (SupplierID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SupplierID);
      }
      if (ColorID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ColorID);
      }
      if (ItemCategoryId1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCategoryId1);
      }
      if (ItemCategoryId2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemCategoryId2);
      }
      if (ItemCategoryId3 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemCategoryId3);
      }
      if (FirstYear.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstYear);
      }
      if (FirstSeason.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FirstSeason);
      }
      if (DevMonth.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DevMonth);
      }
      if (Developer.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Developer);
      }
      if (ItemCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ItemCode);
      }
      if (ItemCode2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ItemCode2);
      }
      if (ColorCode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ColorCode);
      }
      if (ItemName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ItemName);
      }
      if (ItemSpec.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ItemSpec);
      }
      if (BuyerId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BuyerId);
      }
      if (Buyer != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Buyer);
      }
      if (Price != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Price);
      }
      if (DevPrice != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(DevPrice);
      }
      if (ExclusiveTaxPrice != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(ExclusiveTaxPrice);
      }
      if (DevExclusiveTaxPrice != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(DevExclusiveTaxPrice);
      }
      if (ExclusiveTaxPriceAgent != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(ExclusiveTaxPriceAgent);
      }
      if (PriceAgent != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(PriceAgent);
      }
      if (KGPrice != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(KGPrice);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Unit);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Component);
      }
      if (LateralContraction != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(LateralContraction);
      }
      if (DirectContraction != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(DirectContraction);
      }
      if (ItemWidth != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(ItemWidth);
      }
      if (Weight != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(Weight);
      }
      if (KilogramMeter != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(KilogramMeter);
      }
      if (DaysSupply.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(DaysSupply);
      }
      if (MOQ != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(MOQ);
      }
      if (UpperInventory != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(UpperInventory);
      }
      if (BelowInventory != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(BelowInventory);
      }
      if (SupplierItemCode.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(SupplierItemCode);
      }
      if (SupplierItemColor.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SupplierItemColor);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(Remark);
      }
      if (PicturePath.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(PicturePath);
      }
      if (HaveApproveDevPrice != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(HaveApproveDevPrice);
      }
      if (HaveApprovePrice != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(HaveApprovePrice);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(Brand);
      }
      if (DevType.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(DevType);
      }
      if (SortCode != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(SortCode);
      }
      if (Enabled != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(Enabled);
      }
      if (Deleted != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Deleted);
      }
      if (AccountID != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(AccountID);
      }
      if (CreatedOn != 0D) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(CreatedOn);
      }
      if (CreatedBy.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(CreatedBy);
      }
      if (CreatedCustomerId != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(CreatedCustomerId);
      }
      if (ModifiedOn != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(ModifiedOn);
      }
      if (ModifiedBy.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(ModifiedBy);
      }
      if (ModifiedCustomerId != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ModifiedCustomerId);
      }
      if (ApprovalPriceRemark.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(ApprovalPriceRemark);
      }
      if (ExemptionState != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ExemptionState);
      }
      if (OwnerId != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(OwnerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SupplierID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupplierID);
      }
      if (ColorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorID);
      }
      if (ItemCategoryId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCategoryId1);
      }
      if (ItemCategoryId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCategoryId2);
      }
      if (ItemCategoryId3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCategoryId3);
      }
      if (FirstYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstYear);
      }
      if (FirstSeason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstSeason);
      }
      if (DevMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DevMonth);
      }
      if (Developer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Developer);
      }
      if (ItemCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemCode);
      }
      if (ItemCode2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemCode2);
      }
      if (ColorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColorCode);
      }
      if (ItemName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (ItemSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemSpec);
      }
      if (BuyerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuyerId);
      }
      if (Buyer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Buyer);
      }
      if (Price != 0D) {
        size += 2 + 8;
      }
      if (DevPrice != 0D) {
        size += 2 + 8;
      }
      if (ExclusiveTaxPrice != 0D) {
        size += 2 + 8;
      }
      if (DevExclusiveTaxPrice != 0D) {
        size += 2 + 8;
      }
      if (ExclusiveTaxPriceAgent != 0D) {
        size += 2 + 8;
      }
      if (PriceAgent != 0D) {
        size += 2 + 8;
      }
      if (KGPrice != 0D) {
        size += 2 + 8;
      }
      if (Unit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Component.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Component);
      }
      if (LateralContraction != 0F) {
        size += 2 + 4;
      }
      if (DirectContraction != 0F) {
        size += 2 + 4;
      }
      if (ItemWidth != 0F) {
        size += 2 + 4;
      }
      if (Weight != 0F) {
        size += 2 + 4;
      }
      if (KilogramMeter != 0F) {
        size += 2 + 4;
      }
      if (DaysSupply.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DaysSupply);
      }
      if (MOQ != 0F) {
        size += 2 + 4;
      }
      if (UpperInventory != 0F) {
        size += 2 + 4;
      }
      if (BelowInventory != 0F) {
        size += 2 + 4;
      }
      if (SupplierItemCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SupplierItemCode);
      }
      if (SupplierItemColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SupplierItemColor);
      }
      if (Remark.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (PicturePath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PicturePath);
      }
      if (HaveApproveDevPrice != false) {
        size += 2 + 1;
      }
      if (HaveApprovePrice != false) {
        size += 2 + 1;
      }
      if (Brand.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (DevType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DevType);
      }
      if (SortCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SortCode);
      }
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (Deleted != false) {
        size += 2 + 1;
      }
      if (AccountID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AccountID);
      }
      if (CreatedOn != 0D) {
        size += 2 + 8;
      }
      if (CreatedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CreatedBy);
      }
      if (CreatedCustomerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CreatedCustomerId);
      }
      if (ModifiedOn != 0D) {
        size += 2 + 8;
      }
      if (ModifiedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
      }
      if (ModifiedCustomerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ModifiedCustomerId);
      }
      if (ApprovalPriceRemark.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApprovalPriceRemark);
      }
      if (ExemptionState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExemptionState);
      }
      if (OwnerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StockItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SupplierID != 0) {
        SupplierID = other.SupplierID;
      }
      if (other.ColorID != 0) {
        ColorID = other.ColorID;
      }
      if (other.ItemCategoryId1 != 0) {
        ItemCategoryId1 = other.ItemCategoryId1;
      }
      if (other.ItemCategoryId2 != 0) {
        ItemCategoryId2 = other.ItemCategoryId2;
      }
      if (other.ItemCategoryId3 != 0) {
        ItemCategoryId3 = other.ItemCategoryId3;
      }
      if (other.FirstYear.Length != 0) {
        FirstYear = other.FirstYear;
      }
      if (other.FirstSeason.Length != 0) {
        FirstSeason = other.FirstSeason;
      }
      if (other.DevMonth.Length != 0) {
        DevMonth = other.DevMonth;
      }
      if (other.Developer.Length != 0) {
        Developer = other.Developer;
      }
      if (other.ItemCode.Length != 0) {
        ItemCode = other.ItemCode;
      }
      if (other.ItemCode2.Length != 0) {
        ItemCode2 = other.ItemCode2;
      }
      if (other.ColorCode.Length != 0) {
        ColorCode = other.ColorCode;
      }
      if (other.ItemName.Length != 0) {
        ItemName = other.ItemName;
      }
      if (other.ItemSpec.Length != 0) {
        ItemSpec = other.ItemSpec;
      }
      if (other.BuyerId != 0) {
        BuyerId = other.BuyerId;
      }
      if (other.Buyer != 0) {
        Buyer = other.Buyer;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.DevPrice != 0D) {
        DevPrice = other.DevPrice;
      }
      if (other.ExclusiveTaxPrice != 0D) {
        ExclusiveTaxPrice = other.ExclusiveTaxPrice;
      }
      if (other.DevExclusiveTaxPrice != 0D) {
        DevExclusiveTaxPrice = other.DevExclusiveTaxPrice;
      }
      if (other.ExclusiveTaxPriceAgent != 0D) {
        ExclusiveTaxPriceAgent = other.ExclusiveTaxPriceAgent;
      }
      if (other.PriceAgent != 0D) {
        PriceAgent = other.PriceAgent;
      }
      if (other.KGPrice != 0D) {
        KGPrice = other.KGPrice;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Component.Length != 0) {
        Component = other.Component;
      }
      if (other.LateralContraction != 0F) {
        LateralContraction = other.LateralContraction;
      }
      if (other.DirectContraction != 0F) {
        DirectContraction = other.DirectContraction;
      }
      if (other.ItemWidth != 0F) {
        ItemWidth = other.ItemWidth;
      }
      if (other.Weight != 0F) {
        Weight = other.Weight;
      }
      if (other.KilogramMeter != 0F) {
        KilogramMeter = other.KilogramMeter;
      }
      if (other.DaysSupply.Length != 0) {
        DaysSupply = other.DaysSupply;
      }
      if (other.MOQ != 0F) {
        MOQ = other.MOQ;
      }
      if (other.UpperInventory != 0F) {
        UpperInventory = other.UpperInventory;
      }
      if (other.BelowInventory != 0F) {
        BelowInventory = other.BelowInventory;
      }
      if (other.SupplierItemCode.Length != 0) {
        SupplierItemCode = other.SupplierItemCode;
      }
      if (other.SupplierItemColor.Length != 0) {
        SupplierItemColor = other.SupplierItemColor;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.PicturePath.Length != 0) {
        PicturePath = other.PicturePath;
      }
      if (other.HaveApproveDevPrice != false) {
        HaveApproveDevPrice = other.HaveApproveDevPrice;
      }
      if (other.HaveApprovePrice != false) {
        HaveApprovePrice = other.HaveApprovePrice;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.DevType.Length != 0) {
        DevType = other.DevType;
      }
      if (other.SortCode != 0) {
        SortCode = other.SortCode;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
      if (other.AccountID != 0) {
        AccountID = other.AccountID;
      }
      if (other.CreatedOn != 0D) {
        CreatedOn = other.CreatedOn;
      }
      if (other.CreatedBy.Length != 0) {
        CreatedBy = other.CreatedBy;
      }
      if (other.CreatedCustomerId != 0) {
        CreatedCustomerId = other.CreatedCustomerId;
      }
      if (other.ModifiedOn != 0D) {
        ModifiedOn = other.ModifiedOn;
      }
      if (other.ModifiedBy.Length != 0) {
        ModifiedBy = other.ModifiedBy;
      }
      if (other.ModifiedCustomerId != 0) {
        ModifiedCustomerId = other.ModifiedCustomerId;
      }
      if (other.ApprovalPriceRemark.Length != 0) {
        ApprovalPriceRemark = other.ApprovalPriceRemark;
      }
      if (other.ExemptionState != 0) {
        ExemptionState = other.ExemptionState;
      }
      if (other.OwnerId != 0) {
        OwnerId = other.OwnerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            SupplierID = input.ReadInt32();
            break;
          }
          case 24: {
            ColorID = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCategoryId1 = input.ReadInt32();
            break;
          }
          case 40: {
            ItemCategoryId2 = input.ReadInt32();
            break;
          }
          case 48: {
            ItemCategoryId3 = input.ReadInt32();
            break;
          }
          case 58: {
            FirstYear = input.ReadString();
            break;
          }
          case 66: {
            FirstSeason = input.ReadString();
            break;
          }
          case 74: {
            DevMonth = input.ReadString();
            break;
          }
          case 82: {
            Developer = input.ReadString();
            break;
          }
          case 90: {
            ItemCode = input.ReadString();
            break;
          }
          case 98: {
            ItemCode2 = input.ReadString();
            break;
          }
          case 106: {
            ColorCode = input.ReadString();
            break;
          }
          case 114: {
            ItemName = input.ReadString();
            break;
          }
          case 122: {
            ItemSpec = input.ReadString();
            break;
          }
          case 128: {
            BuyerId = input.ReadInt32();
            break;
          }
          case 136: {
            Buyer = input.ReadInt32();
            break;
          }
          case 145: {
            Price = input.ReadDouble();
            break;
          }
          case 153: {
            DevPrice = input.ReadDouble();
            break;
          }
          case 161: {
            ExclusiveTaxPrice = input.ReadDouble();
            break;
          }
          case 169: {
            DevExclusiveTaxPrice = input.ReadDouble();
            break;
          }
          case 177: {
            ExclusiveTaxPriceAgent = input.ReadDouble();
            break;
          }
          case 185: {
            PriceAgent = input.ReadDouble();
            break;
          }
          case 193: {
            KGPrice = input.ReadDouble();
            break;
          }
          case 202: {
            Unit = input.ReadString();
            break;
          }
          case 210: {
            Component = input.ReadString();
            break;
          }
          case 221: {
            LateralContraction = input.ReadFloat();
            break;
          }
          case 229: {
            DirectContraction = input.ReadFloat();
            break;
          }
          case 237: {
            ItemWidth = input.ReadFloat();
            break;
          }
          case 245: {
            Weight = input.ReadFloat();
            break;
          }
          case 253: {
            KilogramMeter = input.ReadFloat();
            break;
          }
          case 258: {
            DaysSupply = input.ReadString();
            break;
          }
          case 269: {
            MOQ = input.ReadFloat();
            break;
          }
          case 277: {
            UpperInventory = input.ReadFloat();
            break;
          }
          case 285: {
            BelowInventory = input.ReadFloat();
            break;
          }
          case 290: {
            SupplierItemCode = input.ReadString();
            break;
          }
          case 298: {
            SupplierItemColor = input.ReadString();
            break;
          }
          case 306: {
            Remark = input.ReadString();
            break;
          }
          case 314: {
            PicturePath = input.ReadString();
            break;
          }
          case 320: {
            HaveApproveDevPrice = input.ReadBool();
            break;
          }
          case 328: {
            HaveApprovePrice = input.ReadBool();
            break;
          }
          case 338: {
            Brand = input.ReadString();
            break;
          }
          case 346: {
            DevType = input.ReadString();
            break;
          }
          case 352: {
            SortCode = input.ReadInt32();
            break;
          }
          case 360: {
            Enabled = input.ReadBool();
            break;
          }
          case 368: {
            Deleted = input.ReadBool();
            break;
          }
          case 376: {
            AccountID = input.ReadInt32();
            break;
          }
          case 385: {
            CreatedOn = input.ReadDouble();
            break;
          }
          case 394: {
            CreatedBy = input.ReadString();
            break;
          }
          case 400: {
            CreatedCustomerId = input.ReadInt32();
            break;
          }
          case 409: {
            ModifiedOn = input.ReadDouble();
            break;
          }
          case 418: {
            ModifiedBy = input.ReadString();
            break;
          }
          case 424: {
            ModifiedCustomerId = input.ReadInt32();
            break;
          }
          case 434: {
            ApprovalPriceRemark = input.ReadString();
            break;
          }
          case 440: {
            ExemptionState = input.ReadInt32();
            break;
          }
          case 448: {
            OwnerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Product : pb::IMessage<Product> {
    private static readonly pb::MessageParser<Product> _parser = new pb::MessageParser<Product>(() => new Product());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Product> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Inman.Platform.ServiceStub.Data.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product(Product other) : this() {
      id_ = other.id_;
      colorId_ = other.colorId_;
      goodsId_ = other.goodsId_;
      productSN_ = other.productSN_;
      picturePath_ = other.picturePath_;
      remark_ = other.remark_;
      Goods = other.goods_ != null ? other.Goods.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product Clone() {
      return new Product(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ColorId" field.</summary>
    public const int ColorIdFieldNumber = 2;
    private int colorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorId {
      get { return colorId_; }
      set {
        colorId_ = value;
      }
    }

    /// <summary>Field number for the "GoodsId" field.</summary>
    public const int GoodsIdFieldNumber = 3;
    private int goodsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "ProductSN" field.</summary>
    public const int ProductSNFieldNumber = 4;
    private string productSN_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductSN {
      get { return productSN_; }
      set {
        productSN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PicturePath" field.</summary>
    public const int PicturePathFieldNumber = 5;
    private string picturePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PicturePath {
      get { return picturePath_; }
      set {
        picturePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Remark" field.</summary>
    public const int RemarkFieldNumber = 6;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Goods" field.</summary>
    public const int GoodsFieldNumber = 7;
    private global::Inman.Platform.ServiceStub.Data.Goods goods_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Inman.Platform.ServiceStub.Data.Goods Goods {
      get { return goods_; }
      set {
        goods_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Product);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Product other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ColorId != other.ColorId) return false;
      if (GoodsId != other.GoodsId) return false;
      if (ProductSN != other.ProductSN) return false;
      if (PicturePath != other.PicturePath) return false;
      if (Remark != other.Remark) return false;
      if (!object.Equals(Goods, other.Goods)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ColorId != 0) hash ^= ColorId.GetHashCode();
      if (GoodsId != 0) hash ^= GoodsId.GetHashCode();
      if (ProductSN.Length != 0) hash ^= ProductSN.GetHashCode();
      if (PicturePath.Length != 0) hash ^= PicturePath.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (goods_ != null) hash ^= Goods.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ColorId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColorId);
      }
      if (GoodsId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoodsId);
      }
      if (ProductSN.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProductSN);
      }
      if (PicturePath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PicturePath);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Remark);
      }
      if (goods_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Goods);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ColorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorId);
      }
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
      }
      if (ProductSN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductSN);
      }
      if (PicturePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PicturePath);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (goods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Goods);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Product other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ColorId != 0) {
        ColorId = other.ColorId;
      }
      if (other.GoodsId != 0) {
        GoodsId = other.GoodsId;
      }
      if (other.ProductSN.Length != 0) {
        ProductSN = other.ProductSN;
      }
      if (other.PicturePath.Length != 0) {
        PicturePath = other.PicturePath;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.goods_ != null) {
        if (goods_ == null) {
          goods_ = new global::Inman.Platform.ServiceStub.Data.Goods();
        }
        Goods.MergeFrom(other.Goods);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ColorId = input.ReadInt32();
            break;
          }
          case 24: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 34: {
            ProductSN = input.ReadString();
            break;
          }
          case 42: {
            PicturePath = input.ReadString();
            break;
          }
          case 50: {
            Remark = input.ReadString();
            break;
          }
          case 58: {
            if (goods_ == null) {
              goods_ = new global::Inman.Platform.ServiceStub.Data.Goods();
            }
            input.ReadMessage(goods_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Goods : pb::IMessage<Goods> {
    private static readonly pb::MessageParser<Goods> _parser = new pb::MessageParser<Goods>(() => new Goods());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Goods> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Inman.Platform.ServiceStub.Data.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods(Goods other) : this() {
      id_ = other.id_;
      designID_ = other.designID_;
      productCategory1_ = other.productCategory1_;
      productCategory2_ = other.productCategory2_;
      productCategory3_ = other.productCategory3_;
      brand_ = other.brand_;
      productName_ = other.productName_;
      productYear_ = other.productYear_;
      season_ = other.season_;
      execStandard_ = other.execStandard_;
      safetyCass_ = other.safetyCass_;
      component_ = other.component_;
      devCost_ = other.devCost_;
      productSN_ = other.productSN_;
      Design = other.design_ != null ? other.Design.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods Clone() {
      return new Goods(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "DesignID" field.</summary>
    public const int DesignIDFieldNumber = 2;
    private int designID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DesignID {
      get { return designID_; }
      set {
        designID_ = value;
      }
    }

    /// <summary>Field number for the "ProductCategory1" field.</summary>
    public const int ProductCategory1FieldNumber = 3;
    private string productCategory1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductCategory1 {
      get { return productCategory1_; }
      set {
        productCategory1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProductCategory2" field.</summary>
    public const int ProductCategory2FieldNumber = 4;
    private string productCategory2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductCategory2 {
      get { return productCategory2_; }
      set {
        productCategory2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProductCategory3" field.</summary>
    public const int ProductCategory3FieldNumber = 5;
    private string productCategory3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductCategory3 {
      get { return productCategory3_; }
      set {
        productCategory3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Brand" field.</summary>
    public const int BrandFieldNumber = 6;
    private string brand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProductName" field.</summary>
    public const int ProductNameFieldNumber = 7;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProductYear" field.</summary>
    public const int ProductYearFieldNumber = 8;
    private int productYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductYear {
      get { return productYear_; }
      set {
        productYear_ = value;
      }
    }

    /// <summary>Field number for the "Season" field.</summary>
    public const int SeasonFieldNumber = 9;
    private string season_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Season {
      get { return season_; }
      set {
        season_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExecStandard" field.</summary>
    public const int ExecStandardFieldNumber = 10;
    private string execStandard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecStandard {
      get { return execStandard_; }
      set {
        execStandard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SafetyCass" field.</summary>
    public const int SafetyCassFieldNumber = 11;
    private string safetyCass_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SafetyCass {
      get { return safetyCass_; }
      set {
        safetyCass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Component" field.</summary>
    public const int ComponentFieldNumber = 12;
    private string component_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Component {
      get { return component_; }
      set {
        component_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DevCost" field.</summary>
    public const int DevCostFieldNumber = 13;
    private double devCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DevCost {
      get { return devCost_; }
      set {
        devCost_ = value;
      }
    }

    /// <summary>Field number for the "ProductSN" field.</summary>
    public const int ProductSNFieldNumber = 14;
    private string productSN_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductSN {
      get { return productSN_; }
      set {
        productSN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Design" field.</summary>
    public const int DesignFieldNumber = 15;
    private global::Inman.Platform.ServiceStub.Data.Design design_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Inman.Platform.ServiceStub.Data.Design Design {
      get { return design_; }
      set {
        design_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Goods);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Goods other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DesignID != other.DesignID) return false;
      if (ProductCategory1 != other.ProductCategory1) return false;
      if (ProductCategory2 != other.ProductCategory2) return false;
      if (ProductCategory3 != other.ProductCategory3) return false;
      if (Brand != other.Brand) return false;
      if (ProductName != other.ProductName) return false;
      if (ProductYear != other.ProductYear) return false;
      if (Season != other.Season) return false;
      if (ExecStandard != other.ExecStandard) return false;
      if (SafetyCass != other.SafetyCass) return false;
      if (Component != other.Component) return false;
      if (DevCost != other.DevCost) return false;
      if (ProductSN != other.ProductSN) return false;
      if (!object.Equals(Design, other.Design)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DesignID != 0) hash ^= DesignID.GetHashCode();
      if (ProductCategory1.Length != 0) hash ^= ProductCategory1.GetHashCode();
      if (ProductCategory2.Length != 0) hash ^= ProductCategory2.GetHashCode();
      if (ProductCategory3.Length != 0) hash ^= ProductCategory3.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (ProductYear != 0) hash ^= ProductYear.GetHashCode();
      if (Season.Length != 0) hash ^= Season.GetHashCode();
      if (ExecStandard.Length != 0) hash ^= ExecStandard.GetHashCode();
      if (SafetyCass.Length != 0) hash ^= SafetyCass.GetHashCode();
      if (Component.Length != 0) hash ^= Component.GetHashCode();
      if (DevCost != 0D) hash ^= DevCost.GetHashCode();
      if (ProductSN.Length != 0) hash ^= ProductSN.GetHashCode();
      if (design_ != null) hash ^= Design.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DesignID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DesignID);
      }
      if (ProductCategory1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductCategory1);
      }
      if (ProductCategory2.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProductCategory2);
      }
      if (ProductCategory3.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProductCategory3);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Brand);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProductName);
      }
      if (ProductYear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ProductYear);
      }
      if (Season.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Season);
      }
      if (ExecStandard.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExecStandard);
      }
      if (SafetyCass.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SafetyCass);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Component);
      }
      if (DevCost != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(DevCost);
      }
      if (ProductSN.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ProductSN);
      }
      if (design_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Design);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (DesignID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DesignID);
      }
      if (ProductCategory1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductCategory1);
      }
      if (ProductCategory2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductCategory2);
      }
      if (ProductCategory3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductCategory3);
      }
      if (Brand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (ProductYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductYear);
      }
      if (Season.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Season);
      }
      if (ExecStandard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecStandard);
      }
      if (SafetyCass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SafetyCass);
      }
      if (Component.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Component);
      }
      if (DevCost != 0D) {
        size += 1 + 8;
      }
      if (ProductSN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductSN);
      }
      if (design_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Design);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Goods other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DesignID != 0) {
        DesignID = other.DesignID;
      }
      if (other.ProductCategory1.Length != 0) {
        ProductCategory1 = other.ProductCategory1;
      }
      if (other.ProductCategory2.Length != 0) {
        ProductCategory2 = other.ProductCategory2;
      }
      if (other.ProductCategory3.Length != 0) {
        ProductCategory3 = other.ProductCategory3;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.ProductYear != 0) {
        ProductYear = other.ProductYear;
      }
      if (other.Season.Length != 0) {
        Season = other.Season;
      }
      if (other.ExecStandard.Length != 0) {
        ExecStandard = other.ExecStandard;
      }
      if (other.SafetyCass.Length != 0) {
        SafetyCass = other.SafetyCass;
      }
      if (other.Component.Length != 0) {
        Component = other.Component;
      }
      if (other.DevCost != 0D) {
        DevCost = other.DevCost;
      }
      if (other.ProductSN.Length != 0) {
        ProductSN = other.ProductSN;
      }
      if (other.design_ != null) {
        if (design_ == null) {
          design_ = new global::Inman.Platform.ServiceStub.Data.Design();
        }
        Design.MergeFrom(other.Design);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            DesignID = input.ReadInt32();
            break;
          }
          case 26: {
            ProductCategory1 = input.ReadString();
            break;
          }
          case 34: {
            ProductCategory2 = input.ReadString();
            break;
          }
          case 42: {
            ProductCategory3 = input.ReadString();
            break;
          }
          case 50: {
            Brand = input.ReadString();
            break;
          }
          case 58: {
            ProductName = input.ReadString();
            break;
          }
          case 64: {
            ProductYear = input.ReadInt32();
            break;
          }
          case 74: {
            Season = input.ReadString();
            break;
          }
          case 82: {
            ExecStandard = input.ReadString();
            break;
          }
          case 90: {
            SafetyCass = input.ReadString();
            break;
          }
          case 98: {
            Component = input.ReadString();
            break;
          }
          case 105: {
            DevCost = input.ReadDouble();
            break;
          }
          case 114: {
            ProductSN = input.ReadString();
            break;
          }
          case 122: {
            if (design_ == null) {
              design_ = new global::Inman.Platform.ServiceStub.Data.Design();
            }
            input.ReadMessage(design_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Design : pb::IMessage<Design> {
    private static readonly pb::MessageParser<Design> _parser = new pb::MessageParser<Design>(() => new Design());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Design> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Inman.Platform.ServiceStub.Data.DataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Design() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Design(Design other) : this() {
      id_ = other.id_;
      devYear_ = other.devYear_;
      designGroup_ = other.designGroup_;
      designSeason_ = other.designSeason_;
      theme_ = other.theme_;
      collection_ = other.collection_;
      designAssistantName_ = other.designAssistantName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Design Clone() {
      return new Design(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "DevYear" field.</summary>
    public const int DevYearFieldNumber = 2;
    private int devYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DevYear {
      get { return devYear_; }
      set {
        devYear_ = value;
      }
    }

    /// <summary>Field number for the "DesignGroup" field.</summary>
    public const int DesignGroupFieldNumber = 3;
    private string designGroup_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignGroup {
      get { return designGroup_; }
      set {
        designGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DesignSeason" field.</summary>
    public const int DesignSeasonFieldNumber = 4;
    private string designSeason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignSeason {
      get { return designSeason_; }
      set {
        designSeason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Theme" field.</summary>
    public const int ThemeFieldNumber = 5;
    private string theme_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Theme {
      get { return theme_; }
      set {
        theme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Collection" field.</summary>
    public const int CollectionFieldNumber = 6;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DesignAssistantName" field.</summary>
    public const int DesignAssistantNameFieldNumber = 7;
    private string designAssistantName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignAssistantName {
      get { return designAssistantName_; }
      set {
        designAssistantName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Design);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Design other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DevYear != other.DevYear) return false;
      if (DesignGroup != other.DesignGroup) return false;
      if (DesignSeason != other.DesignSeason) return false;
      if (Theme != other.Theme) return false;
      if (Collection != other.Collection) return false;
      if (DesignAssistantName != other.DesignAssistantName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DevYear != 0) hash ^= DevYear.GetHashCode();
      if (DesignGroup.Length != 0) hash ^= DesignGroup.GetHashCode();
      if (DesignSeason.Length != 0) hash ^= DesignSeason.GetHashCode();
      if (Theme.Length != 0) hash ^= Theme.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (DesignAssistantName.Length != 0) hash ^= DesignAssistantName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DevYear != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DevYear);
      }
      if (DesignGroup.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DesignGroup);
      }
      if (DesignSeason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DesignSeason);
      }
      if (Theme.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Theme);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Collection);
      }
      if (DesignAssistantName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DesignAssistantName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (DevYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DevYear);
      }
      if (DesignGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignGroup);
      }
      if (DesignSeason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignSeason);
      }
      if (Theme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Theme);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (DesignAssistantName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignAssistantName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Design other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DevYear != 0) {
        DevYear = other.DevYear;
      }
      if (other.DesignGroup.Length != 0) {
        DesignGroup = other.DesignGroup;
      }
      if (other.DesignSeason.Length != 0) {
        DesignSeason = other.DesignSeason;
      }
      if (other.Theme.Length != 0) {
        Theme = other.Theme;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.DesignAssistantName.Length != 0) {
        DesignAssistantName = other.DesignAssistantName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            DevYear = input.ReadInt32();
            break;
          }
          case 26: {
            DesignGroup = input.ReadString();
            break;
          }
          case 34: {
            DesignSeason = input.ReadString();
            break;
          }
          case 42: {
            Theme = input.ReadString();
            break;
          }
          case 50: {
            Collection = input.ReadString();
            break;
          }
          case 58: {
            DesignAssistantName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
