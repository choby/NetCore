// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userservice.proto
// Original file comments:
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Inman.Platform.ServiceStub {
  /// <summary>
  ///  The greeting service definition.
  /// </summary>
  public static class UserService
  {
    static readonly string __ServiceName = "UserService";

    static readonly Marshaller<global::Inman.Platform.ServiceStub.LoginStuff> __Marshaller_LoginStuff = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Inman.Platform.ServiceStub.LoginStuff.Parser.ParseFrom);
    static readonly Marshaller<global::Inman.Platform.ServiceStub.LoginResult> __Marshaller_LoginResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Inman.Platform.ServiceStub.LoginResult.Parser.ParseFrom);

    static readonly Method<global::Inman.Platform.ServiceStub.LoginStuff, global::Inman.Platform.ServiceStub.LoginResult> __Method_LoginValidate = new Method<global::Inman.Platform.ServiceStub.LoginStuff, global::Inman.Platform.ServiceStub.LoginResult>(
        MethodType.Unary,
        __ServiceName,
        "LoginValidate",
        __Marshaller_LoginStuff,
        __Marshaller_LoginResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Inman.Platform.ServiceStub.UserserviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    public abstract class UserServiceBase
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Inman.Platform.ServiceStub.LoginResult> LoginValidate(global::Inman.Platform.ServiceStub.LoginStuff request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public class UserServiceClient : ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Inman.Platform.ServiceStub.LoginResult LoginValidate(global::Inman.Platform.ServiceStub.LoginStuff request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoginValidate(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Inman.Platform.ServiceStub.LoginResult LoginValidate(global::Inman.Platform.ServiceStub.LoginStuff request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoginValidate, null, options, request);
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Inman.Platform.ServiceStub.LoginResult> LoginValidateAsync(global::Inman.Platform.ServiceStub.LoginStuff request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoginValidateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Inman.Platform.ServiceStub.LoginResult> LoginValidateAsync(global::Inman.Platform.ServiceStub.LoginStuff request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoginValidate, null, options, request);
      }
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LoginValidate, serviceImpl.LoginValidate).Build();
    }

  }
}
#endregion
